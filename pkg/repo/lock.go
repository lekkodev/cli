package repo

import (
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"gopkg.in/yaml.v3"
)

// Schema for a Lekko lockfile to be placed/managed in projects that use native
// lang for Lekko
type LekkoLock struct {
	// The latest pushed commit SHA in the config repo from the perspective of
	// the code repo. Allows stable regeneration and correct 3-way merges.
	Commit string
	// TODO: Maybe consider adding more repo info here to "connect" code
	// and config repos better
}

// Looks for, and reads, a `lekko.lock` file in the given path
func (l *LekkoLock) ReadLekkoLock(path string) error {
	f, err := os.ReadFile(filepath.Join(path, "lekko.lock"))
	if err != nil {
		return err
	}
	if err := yaml.Unmarshal(f, l); err != nil {
		return err
	}
	if l.Commit == "" {
		return errors.New("invalid commit hash in lockfile")
	}
	return nil
}

// Writes a file `lekko.lock` with the YAML-marshaled contents to the given path
func (l *LekkoLock) WriteFile(path string) error {
	f, err := os.OpenFile(filepath.Join(path, "lekko.lock"), os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0666)
	if err != nil {
		return err
	}
	defer f.Close()
	// Preamble
	if _, err := f.WriteString("# This file is generated by running `lekko repo push` from your project.\n"); err != nil {
		return errors.Wrap(err, "write preamble")
	}
	// Write contents
	enc := yaml.NewEncoder(f)
	if err := enc.Encode(l); err != nil {
		return err
	}
	return nil
}
