// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lekko/bff/v1beta1/auth_service.proto

package bffv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/bff/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "lekko.bff.v1beta1.AuthService"
)

// AuthServiceClient is a client for the lekko.bff.v1beta1.AuthService service.
type AuthServiceClient interface {
	// We will return required auth info in a cookie
	// that is sent to the same origin for other requests
	// inside the bff service.
	Login(context.Context, *connect_go.Request[v1beta1.LoginRequest]) (*connect_go.Response[v1beta1.LoginResponse], error)
	// Returns a response indicating if the account already
	// existed.
	RegisterUser(context.Context, *connect_go.Request[v1beta1.RegisterUserRequest]) (*connect_go.Response[v1beta1.RegisterUserResponse], error)
}

// NewAuthServiceClient constructs a client for the lekko.bff.v1beta1.AuthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		login: connect_go.NewClient[v1beta1.LoginRequest, v1beta1.LoginResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.AuthService/Login",
			opts...,
		),
		registerUser: connect_go.NewClient[v1beta1.RegisterUserRequest, v1beta1.RegisterUserResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.AuthService/RegisterUser",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login        *connect_go.Client[v1beta1.LoginRequest, v1beta1.LoginResponse]
	registerUser *connect_go.Client[v1beta1.RegisterUserRequest, v1beta1.RegisterUserResponse]
}

// Login calls lekko.bff.v1beta1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect_go.Request[v1beta1.LoginRequest]) (*connect_go.Response[v1beta1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RegisterUser calls lekko.bff.v1beta1.AuthService.RegisterUser.
func (c *authServiceClient) RegisterUser(ctx context.Context, req *connect_go.Request[v1beta1.RegisterUserRequest]) (*connect_go.Response[v1beta1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the lekko.bff.v1beta1.AuthService service.
type AuthServiceHandler interface {
	// We will return required auth info in a cookie
	// that is sent to the same origin for other requests
	// inside the bff service.
	Login(context.Context, *connect_go.Request[v1beta1.LoginRequest]) (*connect_go.Response[v1beta1.LoginResponse], error)
	// Returns a response indicating if the account already
	// existed.
	RegisterUser(context.Context, *connect_go.Request[v1beta1.RegisterUserRequest]) (*connect_go.Response[v1beta1.RegisterUserResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lekko.bff.v1beta1.AuthService/Login", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.AuthService/Login",
		svc.Login,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.AuthService/RegisterUser", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.AuthService/RegisterUser",
		svc.RegisterUser,
		opts...,
	))
	return "/lekko.bff.v1beta1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect_go.Request[v1beta1.LoginRequest]) (*connect_go.Response[v1beta1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterUser(context.Context, *connect_go.Request[v1beta1.RegisterUserRequest]) (*connect_go.Response[v1beta1.RegisterUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.AuthService.RegisterUser is not implemented"))
}
