// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lekko/bff/v1beta1/bff.proto

package bffv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/bff/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BFFServiceName is the fully-qualified name of the BFFService service.
	BFFServiceName = "lekko.bff.v1beta1.BFFService"
)

// BFFServiceClient is a client for the lekko.bff.v1beta1.BFFService service.
type BFFServiceClient interface {
	// User management
	GetUserLoggedInInfo(context.Context, *connect_go.Request[v1beta1.GetUserLoggedInInfoRequest]) (*connect_go.Response[v1beta1.GetUserLoggedInInfoResponse], error)
	ChangePassword(context.Context, *connect_go.Request[v1beta1.ChangePasswordRequest]) (*connect_go.Response[v1beta1.ChangePasswordResponse], error)
	// Retrieves an oauth access token for the user, and stores in in the database
	OAuthUser(context.Context, *connect_go.Request[v1beta1.OAuthUserRequest]) (*connect_go.Response[v1beta1.OAuthUserResponse], error)
	GetUserOAuth(context.Context, *connect_go.Request[v1beta1.GetUserOAuthRequest]) (*connect_go.Response[v1beta1.GetUserOAuthResponse], error)
	AuthorizeDevice(context.Context, *connect_go.Request[v1beta1.AuthorizeDeviceRequest]) (*connect_go.Response[v1beta1.AuthorizeDeviceResponse], error)
	CreateTeam(context.Context, *connect_go.Request[v1beta1.CreateTeamRequest]) (*connect_go.Response[v1beta1.CreateTeamResponse], error)
	DeleteTeam(context.Context, *connect_go.Request[v1beta1.DeleteTeamRequest]) (*connect_go.Response[v1beta1.DeleteTeamResponse], error)
	UseTeam(context.Context, *connect_go.Request[v1beta1.UseTeamRequest]) (*connect_go.Response[v1beta1.UseTeamResponse], error)
	ListTeamMemberships(context.Context, *connect_go.Request[v1beta1.ListTeamMembershipsRequest]) (*connect_go.Response[v1beta1.ListTeamMembershipsResponse], error)
	ListUserMemberships(context.Context, *connect_go.Request[v1beta1.ListUserMembershipsRequest]) (*connect_go.Response[v1beta1.ListUserMembershipsResponse], error)
	UpsertMembership(context.Context, *connect_go.Request[v1beta1.UpsertMembershipRequest]) (*connect_go.Response[v1beta1.UpsertMembershipResponse], error)
	RemoveMembership(context.Context, *connect_go.Request[v1beta1.RemoveMembershipRequest]) (*connect_go.Response[v1beta1.RemoveMembershipResponse], error)
	CreateRepository(context.Context, *connect_go.Request[v1beta1.CreateRepositoryRequest]) (*connect_go.Response[v1beta1.CreateRepositoryResponse], error)
	DeleteRepository(context.Context, *connect_go.Request[v1beta1.DeleteRepositoryRequest]) (*connect_go.Response[v1beta1.DeleteRepositoryResponse], error)
	ListRepositories(context.Context, *connect_go.Request[v1beta1.ListRepositoriesRequest]) (*connect_go.Response[v1beta1.ListRepositoriesResponse], error)
	ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error)
	// Lists all the features within a repository (and optionally, namespace)
	ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error)
	GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error)
	// Get info about multiple PRs in a repository
	//
	// Deprecated: do not use.
	GetPRInfo(context.Context, *connect_go.Request[v1beta1.GetPRInfoRequest]) (*connect_go.Response[v1beta1.GetPRInfoResponse], error)
	// Get info about a single PR for the provided branch
	GetPR(context.Context, *connect_go.Request[v1beta1.GetPRRequest]) (*connect_go.Response[v1beta1.GetPRResponse], error)
	// Deprecated, use Merge instead
	//
	// Deprecated: do not use.
	MergePR(context.Context, *connect_go.Request[v1beta1.MergePRRequest]) (*connect_go.Response[v1beta1.MergePRResponse], error)
	CreateBranch(context.Context, *connect_go.Request[v1beta1.CreateBranchRequest]) (*connect_go.Response[v1beta1.CreateBranchResponse], error)
	ListBranches(context.Context, *connect_go.Request[v1beta1.ListBranchesRequest]) (*connect_go.Response[v1beta1.ListBranchesResponse], error)
	DeleteBranch(context.Context, *connect_go.Request[v1beta1.DeleteBranchRequest]) (*connect_go.Response[v1beta1.DeleteBranchResponse], error)
	// Saves a feature to the local repo, and runs compilation
	Save(context.Context, *connect_go.Request[v1beta1.SaveRequest]) (*connect_go.Response[v1beta1.SaveResponse], error)
	// Review opens a pull request against main using the currently committed changes.
	Review(context.Context, *connect_go.Request[v1beta1.ReviewRequest]) (*connect_go.Response[v1beta1.ReviewResponse], error)
	// Merges the pull request based on the given session.
	Merge(context.Context, *connect_go.Request[v1beta1.MergeRequest]) (*connect_go.Response[v1beta1.MergeResponse], error)
	// Evaluates the feature based on the given session.
	Eval(context.Context, *connect_go.Request[v1beta1.EvalRequest]) (*connect_go.Response[v1beta1.EvalResponse], error)
	GetFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.GetFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.GetFlagEvaluationMetricsResponse], error)
	// Performs a global restore of the repo, creating a dev session under the hood with the changes.
	Restore(context.Context, *connect_go.Request[v1beta1.RestoreRequest]) (*connect_go.Response[v1beta1.RestoreResponse], error)
	GetRepositoryLogs(context.Context, *connect_go.Request[v1beta1.GetRepositoryLogsRequest]) (*connect_go.Response[v1beta1.GetRepositoryLogsResponse], error)
	GetRollout(context.Context, *connect_go.Request[v1beta1.GetRolloutRequest]) (*connect_go.Response[v1beta1.GetRolloutResponse], error)
}

// NewBFFServiceClient constructs a client for the lekko.bff.v1beta1.BFFService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBFFServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BFFServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bFFServiceClient{
		getUserLoggedInInfo: connect_go.NewClient[v1beta1.GetUserLoggedInInfoRequest, v1beta1.GetUserLoggedInInfoResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetUserLoggedInInfo",
			opts...,
		),
		changePassword: connect_go.NewClient[v1beta1.ChangePasswordRequest, v1beta1.ChangePasswordResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ChangePassword",
			opts...,
		),
		oAuthUser: connect_go.NewClient[v1beta1.OAuthUserRequest, v1beta1.OAuthUserResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/OAuthUser",
			opts...,
		),
		getUserOAuth: connect_go.NewClient[v1beta1.GetUserOAuthRequest, v1beta1.GetUserOAuthResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetUserOAuth",
			opts...,
		),
		authorizeDevice: connect_go.NewClient[v1beta1.AuthorizeDeviceRequest, v1beta1.AuthorizeDeviceResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/AuthorizeDevice",
			opts...,
		),
		createTeam: connect_go.NewClient[v1beta1.CreateTeamRequest, v1beta1.CreateTeamResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/CreateTeam",
			opts...,
		),
		deleteTeam: connect_go.NewClient[v1beta1.DeleteTeamRequest, v1beta1.DeleteTeamResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/DeleteTeam",
			opts...,
		),
		useTeam: connect_go.NewClient[v1beta1.UseTeamRequest, v1beta1.UseTeamResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/UseTeam",
			opts...,
		),
		listTeamMemberships: connect_go.NewClient[v1beta1.ListTeamMembershipsRequest, v1beta1.ListTeamMembershipsResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListTeamMemberships",
			opts...,
		),
		listUserMemberships: connect_go.NewClient[v1beta1.ListUserMembershipsRequest, v1beta1.ListUserMembershipsResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListUserMemberships",
			opts...,
		),
		upsertMembership: connect_go.NewClient[v1beta1.UpsertMembershipRequest, v1beta1.UpsertMembershipResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/UpsertMembership",
			opts...,
		),
		removeMembership: connect_go.NewClient[v1beta1.RemoveMembershipRequest, v1beta1.RemoveMembershipResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/RemoveMembership",
			opts...,
		),
		createRepository: connect_go.NewClient[v1beta1.CreateRepositoryRequest, v1beta1.CreateRepositoryResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/CreateRepository",
			opts...,
		),
		deleteRepository: connect_go.NewClient[v1beta1.DeleteRepositoryRequest, v1beta1.DeleteRepositoryResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/DeleteRepository",
			opts...,
		),
		listRepositories: connect_go.NewClient[v1beta1.ListRepositoriesRequest, v1beta1.ListRepositoriesResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListRepositories",
			opts...,
		),
		listNamespaces: connect_go.NewClient[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListNamespaces",
			opts...,
		),
		listFeatures: connect_go.NewClient[v1beta1.ListFeaturesRequest, v1beta1.ListFeaturesResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListFeatures",
			opts...,
		),
		getFeature: connect_go.NewClient[v1beta1.GetFeatureRequest, v1beta1.GetFeatureResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetFeature",
			opts...,
		),
		getPRInfo: connect_go.NewClient[v1beta1.GetPRInfoRequest, v1beta1.GetPRInfoResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetPRInfo",
			opts...,
		),
		getPR: connect_go.NewClient[v1beta1.GetPRRequest, v1beta1.GetPRResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetPR",
			opts...,
		),
		mergePR: connect_go.NewClient[v1beta1.MergePRRequest, v1beta1.MergePRResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/MergePR",
			opts...,
		),
		createBranch: connect_go.NewClient[v1beta1.CreateBranchRequest, v1beta1.CreateBranchResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/CreateBranch",
			opts...,
		),
		listBranches: connect_go.NewClient[v1beta1.ListBranchesRequest, v1beta1.ListBranchesResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/ListBranches",
			opts...,
		),
		deleteBranch: connect_go.NewClient[v1beta1.DeleteBranchRequest, v1beta1.DeleteBranchResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/DeleteBranch",
			opts...,
		),
		save: connect_go.NewClient[v1beta1.SaveRequest, v1beta1.SaveResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/Save",
			opts...,
		),
		review: connect_go.NewClient[v1beta1.ReviewRequest, v1beta1.ReviewResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/Review",
			opts...,
		),
		merge: connect_go.NewClient[v1beta1.MergeRequest, v1beta1.MergeResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/Merge",
			opts...,
		),
		eval: connect_go.NewClient[v1beta1.EvalRequest, v1beta1.EvalResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/Eval",
			opts...,
		),
		getFlagEvaluationMetrics: connect_go.NewClient[v1beta1.GetFlagEvaluationMetricsRequest, v1beta1.GetFlagEvaluationMetricsResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetFlagEvaluationMetrics",
			opts...,
		),
		restore: connect_go.NewClient[v1beta1.RestoreRequest, v1beta1.RestoreResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/Restore",
			opts...,
		),
		getRepositoryLogs: connect_go.NewClient[v1beta1.GetRepositoryLogsRequest, v1beta1.GetRepositoryLogsResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetRepositoryLogs",
			opts...,
		),
		getRollout: connect_go.NewClient[v1beta1.GetRolloutRequest, v1beta1.GetRolloutResponse](
			httpClient,
			baseURL+"/lekko.bff.v1beta1.BFFService/GetRollout",
			opts...,
		),
	}
}

// bFFServiceClient implements BFFServiceClient.
type bFFServiceClient struct {
	getUserLoggedInInfo      *connect_go.Client[v1beta1.GetUserLoggedInInfoRequest, v1beta1.GetUserLoggedInInfoResponse]
	changePassword           *connect_go.Client[v1beta1.ChangePasswordRequest, v1beta1.ChangePasswordResponse]
	oAuthUser                *connect_go.Client[v1beta1.OAuthUserRequest, v1beta1.OAuthUserResponse]
	getUserOAuth             *connect_go.Client[v1beta1.GetUserOAuthRequest, v1beta1.GetUserOAuthResponse]
	authorizeDevice          *connect_go.Client[v1beta1.AuthorizeDeviceRequest, v1beta1.AuthorizeDeviceResponse]
	createTeam               *connect_go.Client[v1beta1.CreateTeamRequest, v1beta1.CreateTeamResponse]
	deleteTeam               *connect_go.Client[v1beta1.DeleteTeamRequest, v1beta1.DeleteTeamResponse]
	useTeam                  *connect_go.Client[v1beta1.UseTeamRequest, v1beta1.UseTeamResponse]
	listTeamMemberships      *connect_go.Client[v1beta1.ListTeamMembershipsRequest, v1beta1.ListTeamMembershipsResponse]
	listUserMemberships      *connect_go.Client[v1beta1.ListUserMembershipsRequest, v1beta1.ListUserMembershipsResponse]
	upsertMembership         *connect_go.Client[v1beta1.UpsertMembershipRequest, v1beta1.UpsertMembershipResponse]
	removeMembership         *connect_go.Client[v1beta1.RemoveMembershipRequest, v1beta1.RemoveMembershipResponse]
	createRepository         *connect_go.Client[v1beta1.CreateRepositoryRequest, v1beta1.CreateRepositoryResponse]
	deleteRepository         *connect_go.Client[v1beta1.DeleteRepositoryRequest, v1beta1.DeleteRepositoryResponse]
	listRepositories         *connect_go.Client[v1beta1.ListRepositoriesRequest, v1beta1.ListRepositoriesResponse]
	listNamespaces           *connect_go.Client[v1beta1.ListNamespacesRequest, v1beta1.ListNamespacesResponse]
	listFeatures             *connect_go.Client[v1beta1.ListFeaturesRequest, v1beta1.ListFeaturesResponse]
	getFeature               *connect_go.Client[v1beta1.GetFeatureRequest, v1beta1.GetFeatureResponse]
	getPRInfo                *connect_go.Client[v1beta1.GetPRInfoRequest, v1beta1.GetPRInfoResponse]
	getPR                    *connect_go.Client[v1beta1.GetPRRequest, v1beta1.GetPRResponse]
	mergePR                  *connect_go.Client[v1beta1.MergePRRequest, v1beta1.MergePRResponse]
	createBranch             *connect_go.Client[v1beta1.CreateBranchRequest, v1beta1.CreateBranchResponse]
	listBranches             *connect_go.Client[v1beta1.ListBranchesRequest, v1beta1.ListBranchesResponse]
	deleteBranch             *connect_go.Client[v1beta1.DeleteBranchRequest, v1beta1.DeleteBranchResponse]
	save                     *connect_go.Client[v1beta1.SaveRequest, v1beta1.SaveResponse]
	review                   *connect_go.Client[v1beta1.ReviewRequest, v1beta1.ReviewResponse]
	merge                    *connect_go.Client[v1beta1.MergeRequest, v1beta1.MergeResponse]
	eval                     *connect_go.Client[v1beta1.EvalRequest, v1beta1.EvalResponse]
	getFlagEvaluationMetrics *connect_go.Client[v1beta1.GetFlagEvaluationMetricsRequest, v1beta1.GetFlagEvaluationMetricsResponse]
	restore                  *connect_go.Client[v1beta1.RestoreRequest, v1beta1.RestoreResponse]
	getRepositoryLogs        *connect_go.Client[v1beta1.GetRepositoryLogsRequest, v1beta1.GetRepositoryLogsResponse]
	getRollout               *connect_go.Client[v1beta1.GetRolloutRequest, v1beta1.GetRolloutResponse]
}

// GetUserLoggedInInfo calls lekko.bff.v1beta1.BFFService.GetUserLoggedInInfo.
func (c *bFFServiceClient) GetUserLoggedInInfo(ctx context.Context, req *connect_go.Request[v1beta1.GetUserLoggedInInfoRequest]) (*connect_go.Response[v1beta1.GetUserLoggedInInfoResponse], error) {
	return c.getUserLoggedInInfo.CallUnary(ctx, req)
}

// ChangePassword calls lekko.bff.v1beta1.BFFService.ChangePassword.
func (c *bFFServiceClient) ChangePassword(ctx context.Context, req *connect_go.Request[v1beta1.ChangePasswordRequest]) (*connect_go.Response[v1beta1.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// OAuthUser calls lekko.bff.v1beta1.BFFService.OAuthUser.
func (c *bFFServiceClient) OAuthUser(ctx context.Context, req *connect_go.Request[v1beta1.OAuthUserRequest]) (*connect_go.Response[v1beta1.OAuthUserResponse], error) {
	return c.oAuthUser.CallUnary(ctx, req)
}

// GetUserOAuth calls lekko.bff.v1beta1.BFFService.GetUserOAuth.
func (c *bFFServiceClient) GetUserOAuth(ctx context.Context, req *connect_go.Request[v1beta1.GetUserOAuthRequest]) (*connect_go.Response[v1beta1.GetUserOAuthResponse], error) {
	return c.getUserOAuth.CallUnary(ctx, req)
}

// AuthorizeDevice calls lekko.bff.v1beta1.BFFService.AuthorizeDevice.
func (c *bFFServiceClient) AuthorizeDevice(ctx context.Context, req *connect_go.Request[v1beta1.AuthorizeDeviceRequest]) (*connect_go.Response[v1beta1.AuthorizeDeviceResponse], error) {
	return c.authorizeDevice.CallUnary(ctx, req)
}

// CreateTeam calls lekko.bff.v1beta1.BFFService.CreateTeam.
func (c *bFFServiceClient) CreateTeam(ctx context.Context, req *connect_go.Request[v1beta1.CreateTeamRequest]) (*connect_go.Response[v1beta1.CreateTeamResponse], error) {
	return c.createTeam.CallUnary(ctx, req)
}

// DeleteTeam calls lekko.bff.v1beta1.BFFService.DeleteTeam.
func (c *bFFServiceClient) DeleteTeam(ctx context.Context, req *connect_go.Request[v1beta1.DeleteTeamRequest]) (*connect_go.Response[v1beta1.DeleteTeamResponse], error) {
	return c.deleteTeam.CallUnary(ctx, req)
}

// UseTeam calls lekko.bff.v1beta1.BFFService.UseTeam.
func (c *bFFServiceClient) UseTeam(ctx context.Context, req *connect_go.Request[v1beta1.UseTeamRequest]) (*connect_go.Response[v1beta1.UseTeamResponse], error) {
	return c.useTeam.CallUnary(ctx, req)
}

// ListTeamMemberships calls lekko.bff.v1beta1.BFFService.ListTeamMemberships.
func (c *bFFServiceClient) ListTeamMemberships(ctx context.Context, req *connect_go.Request[v1beta1.ListTeamMembershipsRequest]) (*connect_go.Response[v1beta1.ListTeamMembershipsResponse], error) {
	return c.listTeamMemberships.CallUnary(ctx, req)
}

// ListUserMemberships calls lekko.bff.v1beta1.BFFService.ListUserMemberships.
func (c *bFFServiceClient) ListUserMemberships(ctx context.Context, req *connect_go.Request[v1beta1.ListUserMembershipsRequest]) (*connect_go.Response[v1beta1.ListUserMembershipsResponse], error) {
	return c.listUserMemberships.CallUnary(ctx, req)
}

// UpsertMembership calls lekko.bff.v1beta1.BFFService.UpsertMembership.
func (c *bFFServiceClient) UpsertMembership(ctx context.Context, req *connect_go.Request[v1beta1.UpsertMembershipRequest]) (*connect_go.Response[v1beta1.UpsertMembershipResponse], error) {
	return c.upsertMembership.CallUnary(ctx, req)
}

// RemoveMembership calls lekko.bff.v1beta1.BFFService.RemoveMembership.
func (c *bFFServiceClient) RemoveMembership(ctx context.Context, req *connect_go.Request[v1beta1.RemoveMembershipRequest]) (*connect_go.Response[v1beta1.RemoveMembershipResponse], error) {
	return c.removeMembership.CallUnary(ctx, req)
}

// CreateRepository calls lekko.bff.v1beta1.BFFService.CreateRepository.
func (c *bFFServiceClient) CreateRepository(ctx context.Context, req *connect_go.Request[v1beta1.CreateRepositoryRequest]) (*connect_go.Response[v1beta1.CreateRepositoryResponse], error) {
	return c.createRepository.CallUnary(ctx, req)
}

// DeleteRepository calls lekko.bff.v1beta1.BFFService.DeleteRepository.
func (c *bFFServiceClient) DeleteRepository(ctx context.Context, req *connect_go.Request[v1beta1.DeleteRepositoryRequest]) (*connect_go.Response[v1beta1.DeleteRepositoryResponse], error) {
	return c.deleteRepository.CallUnary(ctx, req)
}

// ListRepositories calls lekko.bff.v1beta1.BFFService.ListRepositories.
func (c *bFFServiceClient) ListRepositories(ctx context.Context, req *connect_go.Request[v1beta1.ListRepositoriesRequest]) (*connect_go.Response[v1beta1.ListRepositoriesResponse], error) {
	return c.listRepositories.CallUnary(ctx, req)
}

// ListNamespaces calls lekko.bff.v1beta1.BFFService.ListNamespaces.
func (c *bFFServiceClient) ListNamespaces(ctx context.Context, req *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error) {
	return c.listNamespaces.CallUnary(ctx, req)
}

// ListFeatures calls lekko.bff.v1beta1.BFFService.ListFeatures.
func (c *bFFServiceClient) ListFeatures(ctx context.Context, req *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error) {
	return c.listFeatures.CallUnary(ctx, req)
}

// GetFeature calls lekko.bff.v1beta1.BFFService.GetFeature.
func (c *bFFServiceClient) GetFeature(ctx context.Context, req *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error) {
	return c.getFeature.CallUnary(ctx, req)
}

// GetPRInfo calls lekko.bff.v1beta1.BFFService.GetPRInfo.
//
// Deprecated: do not use.
func (c *bFFServiceClient) GetPRInfo(ctx context.Context, req *connect_go.Request[v1beta1.GetPRInfoRequest]) (*connect_go.Response[v1beta1.GetPRInfoResponse], error) {
	return c.getPRInfo.CallUnary(ctx, req)
}

// GetPR calls lekko.bff.v1beta1.BFFService.GetPR.
func (c *bFFServiceClient) GetPR(ctx context.Context, req *connect_go.Request[v1beta1.GetPRRequest]) (*connect_go.Response[v1beta1.GetPRResponse], error) {
	return c.getPR.CallUnary(ctx, req)
}

// MergePR calls lekko.bff.v1beta1.BFFService.MergePR.
//
// Deprecated: do not use.
func (c *bFFServiceClient) MergePR(ctx context.Context, req *connect_go.Request[v1beta1.MergePRRequest]) (*connect_go.Response[v1beta1.MergePRResponse], error) {
	return c.mergePR.CallUnary(ctx, req)
}

// CreateBranch calls lekko.bff.v1beta1.BFFService.CreateBranch.
func (c *bFFServiceClient) CreateBranch(ctx context.Context, req *connect_go.Request[v1beta1.CreateBranchRequest]) (*connect_go.Response[v1beta1.CreateBranchResponse], error) {
	return c.createBranch.CallUnary(ctx, req)
}

// ListBranches calls lekko.bff.v1beta1.BFFService.ListBranches.
func (c *bFFServiceClient) ListBranches(ctx context.Context, req *connect_go.Request[v1beta1.ListBranchesRequest]) (*connect_go.Response[v1beta1.ListBranchesResponse], error) {
	return c.listBranches.CallUnary(ctx, req)
}

// DeleteBranch calls lekko.bff.v1beta1.BFFService.DeleteBranch.
func (c *bFFServiceClient) DeleteBranch(ctx context.Context, req *connect_go.Request[v1beta1.DeleteBranchRequest]) (*connect_go.Response[v1beta1.DeleteBranchResponse], error) {
	return c.deleteBranch.CallUnary(ctx, req)
}

// Save calls lekko.bff.v1beta1.BFFService.Save.
func (c *bFFServiceClient) Save(ctx context.Context, req *connect_go.Request[v1beta1.SaveRequest]) (*connect_go.Response[v1beta1.SaveResponse], error) {
	return c.save.CallUnary(ctx, req)
}

// Review calls lekko.bff.v1beta1.BFFService.Review.
func (c *bFFServiceClient) Review(ctx context.Context, req *connect_go.Request[v1beta1.ReviewRequest]) (*connect_go.Response[v1beta1.ReviewResponse], error) {
	return c.review.CallUnary(ctx, req)
}

// Merge calls lekko.bff.v1beta1.BFFService.Merge.
func (c *bFFServiceClient) Merge(ctx context.Context, req *connect_go.Request[v1beta1.MergeRequest]) (*connect_go.Response[v1beta1.MergeResponse], error) {
	return c.merge.CallUnary(ctx, req)
}

// Eval calls lekko.bff.v1beta1.BFFService.Eval.
func (c *bFFServiceClient) Eval(ctx context.Context, req *connect_go.Request[v1beta1.EvalRequest]) (*connect_go.Response[v1beta1.EvalResponse], error) {
	return c.eval.CallUnary(ctx, req)
}

// GetFlagEvaluationMetrics calls lekko.bff.v1beta1.BFFService.GetFlagEvaluationMetrics.
func (c *bFFServiceClient) GetFlagEvaluationMetrics(ctx context.Context, req *connect_go.Request[v1beta1.GetFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.GetFlagEvaluationMetricsResponse], error) {
	return c.getFlagEvaluationMetrics.CallUnary(ctx, req)
}

// Restore calls lekko.bff.v1beta1.BFFService.Restore.
func (c *bFFServiceClient) Restore(ctx context.Context, req *connect_go.Request[v1beta1.RestoreRequest]) (*connect_go.Response[v1beta1.RestoreResponse], error) {
	return c.restore.CallUnary(ctx, req)
}

// GetRepositoryLogs calls lekko.bff.v1beta1.BFFService.GetRepositoryLogs.
func (c *bFFServiceClient) GetRepositoryLogs(ctx context.Context, req *connect_go.Request[v1beta1.GetRepositoryLogsRequest]) (*connect_go.Response[v1beta1.GetRepositoryLogsResponse], error) {
	return c.getRepositoryLogs.CallUnary(ctx, req)
}

// GetRollout calls lekko.bff.v1beta1.BFFService.GetRollout.
func (c *bFFServiceClient) GetRollout(ctx context.Context, req *connect_go.Request[v1beta1.GetRolloutRequest]) (*connect_go.Response[v1beta1.GetRolloutResponse], error) {
	return c.getRollout.CallUnary(ctx, req)
}

// BFFServiceHandler is an implementation of the lekko.bff.v1beta1.BFFService service.
type BFFServiceHandler interface {
	// User management
	GetUserLoggedInInfo(context.Context, *connect_go.Request[v1beta1.GetUserLoggedInInfoRequest]) (*connect_go.Response[v1beta1.GetUserLoggedInInfoResponse], error)
	ChangePassword(context.Context, *connect_go.Request[v1beta1.ChangePasswordRequest]) (*connect_go.Response[v1beta1.ChangePasswordResponse], error)
	// Retrieves an oauth access token for the user, and stores in in the database
	OAuthUser(context.Context, *connect_go.Request[v1beta1.OAuthUserRequest]) (*connect_go.Response[v1beta1.OAuthUserResponse], error)
	GetUserOAuth(context.Context, *connect_go.Request[v1beta1.GetUserOAuthRequest]) (*connect_go.Response[v1beta1.GetUserOAuthResponse], error)
	AuthorizeDevice(context.Context, *connect_go.Request[v1beta1.AuthorizeDeviceRequest]) (*connect_go.Response[v1beta1.AuthorizeDeviceResponse], error)
	CreateTeam(context.Context, *connect_go.Request[v1beta1.CreateTeamRequest]) (*connect_go.Response[v1beta1.CreateTeamResponse], error)
	DeleteTeam(context.Context, *connect_go.Request[v1beta1.DeleteTeamRequest]) (*connect_go.Response[v1beta1.DeleteTeamResponse], error)
	UseTeam(context.Context, *connect_go.Request[v1beta1.UseTeamRequest]) (*connect_go.Response[v1beta1.UseTeamResponse], error)
	ListTeamMemberships(context.Context, *connect_go.Request[v1beta1.ListTeamMembershipsRequest]) (*connect_go.Response[v1beta1.ListTeamMembershipsResponse], error)
	ListUserMemberships(context.Context, *connect_go.Request[v1beta1.ListUserMembershipsRequest]) (*connect_go.Response[v1beta1.ListUserMembershipsResponse], error)
	UpsertMembership(context.Context, *connect_go.Request[v1beta1.UpsertMembershipRequest]) (*connect_go.Response[v1beta1.UpsertMembershipResponse], error)
	RemoveMembership(context.Context, *connect_go.Request[v1beta1.RemoveMembershipRequest]) (*connect_go.Response[v1beta1.RemoveMembershipResponse], error)
	CreateRepository(context.Context, *connect_go.Request[v1beta1.CreateRepositoryRequest]) (*connect_go.Response[v1beta1.CreateRepositoryResponse], error)
	DeleteRepository(context.Context, *connect_go.Request[v1beta1.DeleteRepositoryRequest]) (*connect_go.Response[v1beta1.DeleteRepositoryResponse], error)
	ListRepositories(context.Context, *connect_go.Request[v1beta1.ListRepositoriesRequest]) (*connect_go.Response[v1beta1.ListRepositoriesResponse], error)
	ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error)
	// Lists all the features within a repository (and optionally, namespace)
	ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error)
	GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error)
	// Get info about multiple PRs in a repository
	//
	// Deprecated: do not use.
	GetPRInfo(context.Context, *connect_go.Request[v1beta1.GetPRInfoRequest]) (*connect_go.Response[v1beta1.GetPRInfoResponse], error)
	// Get info about a single PR for the provided branch
	GetPR(context.Context, *connect_go.Request[v1beta1.GetPRRequest]) (*connect_go.Response[v1beta1.GetPRResponse], error)
	// Deprecated, use Merge instead
	//
	// Deprecated: do not use.
	MergePR(context.Context, *connect_go.Request[v1beta1.MergePRRequest]) (*connect_go.Response[v1beta1.MergePRResponse], error)
	CreateBranch(context.Context, *connect_go.Request[v1beta1.CreateBranchRequest]) (*connect_go.Response[v1beta1.CreateBranchResponse], error)
	ListBranches(context.Context, *connect_go.Request[v1beta1.ListBranchesRequest]) (*connect_go.Response[v1beta1.ListBranchesResponse], error)
	DeleteBranch(context.Context, *connect_go.Request[v1beta1.DeleteBranchRequest]) (*connect_go.Response[v1beta1.DeleteBranchResponse], error)
	// Saves a feature to the local repo, and runs compilation
	Save(context.Context, *connect_go.Request[v1beta1.SaveRequest]) (*connect_go.Response[v1beta1.SaveResponse], error)
	// Review opens a pull request against main using the currently committed changes.
	Review(context.Context, *connect_go.Request[v1beta1.ReviewRequest]) (*connect_go.Response[v1beta1.ReviewResponse], error)
	// Merges the pull request based on the given session.
	Merge(context.Context, *connect_go.Request[v1beta1.MergeRequest]) (*connect_go.Response[v1beta1.MergeResponse], error)
	// Evaluates the feature based on the given session.
	Eval(context.Context, *connect_go.Request[v1beta1.EvalRequest]) (*connect_go.Response[v1beta1.EvalResponse], error)
	GetFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.GetFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.GetFlagEvaluationMetricsResponse], error)
	// Performs a global restore of the repo, creating a dev session under the hood with the changes.
	Restore(context.Context, *connect_go.Request[v1beta1.RestoreRequest]) (*connect_go.Response[v1beta1.RestoreResponse], error)
	GetRepositoryLogs(context.Context, *connect_go.Request[v1beta1.GetRepositoryLogsRequest]) (*connect_go.Response[v1beta1.GetRepositoryLogsResponse], error)
	GetRollout(context.Context, *connect_go.Request[v1beta1.GetRolloutRequest]) (*connect_go.Response[v1beta1.GetRolloutResponse], error)
}

// NewBFFServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBFFServiceHandler(svc BFFServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetUserLoggedInInfo", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetUserLoggedInInfo",
		svc.GetUserLoggedInInfo,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ChangePassword", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ChangePassword",
		svc.ChangePassword,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/OAuthUser", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/OAuthUser",
		svc.OAuthUser,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetUserOAuth", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetUserOAuth",
		svc.GetUserOAuth,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/AuthorizeDevice", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/AuthorizeDevice",
		svc.AuthorizeDevice,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/CreateTeam", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/CreateTeam",
		svc.CreateTeam,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/DeleteTeam", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/DeleteTeam",
		svc.DeleteTeam,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/UseTeam", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/UseTeam",
		svc.UseTeam,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListTeamMemberships", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListTeamMemberships",
		svc.ListTeamMemberships,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListUserMemberships", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListUserMemberships",
		svc.ListUserMemberships,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/UpsertMembership", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/UpsertMembership",
		svc.UpsertMembership,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/RemoveMembership", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/RemoveMembership",
		svc.RemoveMembership,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/CreateRepository", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/CreateRepository",
		svc.CreateRepository,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/DeleteRepository", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/DeleteRepository",
		svc.DeleteRepository,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListRepositories", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListRepositories",
		svc.ListRepositories,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListNamespaces", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListNamespaces",
		svc.ListNamespaces,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListFeatures", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListFeatures",
		svc.ListFeatures,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetFeature", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetFeature",
		svc.GetFeature,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetPRInfo", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetPRInfo",
		svc.GetPRInfo,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetPR", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetPR",
		svc.GetPR,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/MergePR", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/MergePR",
		svc.MergePR,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/CreateBranch", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/CreateBranch",
		svc.CreateBranch,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/ListBranches", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/ListBranches",
		svc.ListBranches,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/DeleteBranch", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/DeleteBranch",
		svc.DeleteBranch,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/Save", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/Save",
		svc.Save,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/Review", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/Review",
		svc.Review,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/Merge", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/Merge",
		svc.Merge,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/Eval", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/Eval",
		svc.Eval,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetFlagEvaluationMetrics", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetFlagEvaluationMetrics",
		svc.GetFlagEvaluationMetrics,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/Restore", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/Restore",
		svc.Restore,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetRepositoryLogs", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetRepositoryLogs",
		svc.GetRepositoryLogs,
		opts...,
	))
	mux.Handle("/lekko.bff.v1beta1.BFFService/GetRollout", connect_go.NewUnaryHandler(
		"/lekko.bff.v1beta1.BFFService/GetRollout",
		svc.GetRollout,
		opts...,
	))
	return "/lekko.bff.v1beta1.BFFService/", mux
}

// UnimplementedBFFServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBFFServiceHandler struct{}

func (UnimplementedBFFServiceHandler) GetUserLoggedInInfo(context.Context, *connect_go.Request[v1beta1.GetUserLoggedInInfoRequest]) (*connect_go.Response[v1beta1.GetUserLoggedInInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetUserLoggedInInfo is not implemented"))
}

func (UnimplementedBFFServiceHandler) ChangePassword(context.Context, *connect_go.Request[v1beta1.ChangePasswordRequest]) (*connect_go.Response[v1beta1.ChangePasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ChangePassword is not implemented"))
}

func (UnimplementedBFFServiceHandler) OAuthUser(context.Context, *connect_go.Request[v1beta1.OAuthUserRequest]) (*connect_go.Response[v1beta1.OAuthUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.OAuthUser is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetUserOAuth(context.Context, *connect_go.Request[v1beta1.GetUserOAuthRequest]) (*connect_go.Response[v1beta1.GetUserOAuthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetUserOAuth is not implemented"))
}

func (UnimplementedBFFServiceHandler) AuthorizeDevice(context.Context, *connect_go.Request[v1beta1.AuthorizeDeviceRequest]) (*connect_go.Response[v1beta1.AuthorizeDeviceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.AuthorizeDevice is not implemented"))
}

func (UnimplementedBFFServiceHandler) CreateTeam(context.Context, *connect_go.Request[v1beta1.CreateTeamRequest]) (*connect_go.Response[v1beta1.CreateTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.CreateTeam is not implemented"))
}

func (UnimplementedBFFServiceHandler) DeleteTeam(context.Context, *connect_go.Request[v1beta1.DeleteTeamRequest]) (*connect_go.Response[v1beta1.DeleteTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.DeleteTeam is not implemented"))
}

func (UnimplementedBFFServiceHandler) UseTeam(context.Context, *connect_go.Request[v1beta1.UseTeamRequest]) (*connect_go.Response[v1beta1.UseTeamResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.UseTeam is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListTeamMemberships(context.Context, *connect_go.Request[v1beta1.ListTeamMembershipsRequest]) (*connect_go.Response[v1beta1.ListTeamMembershipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListTeamMemberships is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListUserMemberships(context.Context, *connect_go.Request[v1beta1.ListUserMembershipsRequest]) (*connect_go.Response[v1beta1.ListUserMembershipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListUserMemberships is not implemented"))
}

func (UnimplementedBFFServiceHandler) UpsertMembership(context.Context, *connect_go.Request[v1beta1.UpsertMembershipRequest]) (*connect_go.Response[v1beta1.UpsertMembershipResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.UpsertMembership is not implemented"))
}

func (UnimplementedBFFServiceHandler) RemoveMembership(context.Context, *connect_go.Request[v1beta1.RemoveMembershipRequest]) (*connect_go.Response[v1beta1.RemoveMembershipResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.RemoveMembership is not implemented"))
}

func (UnimplementedBFFServiceHandler) CreateRepository(context.Context, *connect_go.Request[v1beta1.CreateRepositoryRequest]) (*connect_go.Response[v1beta1.CreateRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.CreateRepository is not implemented"))
}

func (UnimplementedBFFServiceHandler) DeleteRepository(context.Context, *connect_go.Request[v1beta1.DeleteRepositoryRequest]) (*connect_go.Response[v1beta1.DeleteRepositoryResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.DeleteRepository is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListRepositories(context.Context, *connect_go.Request[v1beta1.ListRepositoriesRequest]) (*connect_go.Response[v1beta1.ListRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListRepositories is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListNamespaces(context.Context, *connect_go.Request[v1beta1.ListNamespacesRequest]) (*connect_go.Response[v1beta1.ListNamespacesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListNamespaces is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListFeatures(context.Context, *connect_go.Request[v1beta1.ListFeaturesRequest]) (*connect_go.Response[v1beta1.ListFeaturesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListFeatures is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetFeature(context.Context, *connect_go.Request[v1beta1.GetFeatureRequest]) (*connect_go.Response[v1beta1.GetFeatureResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetFeature is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetPRInfo(context.Context, *connect_go.Request[v1beta1.GetPRInfoRequest]) (*connect_go.Response[v1beta1.GetPRInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetPRInfo is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetPR(context.Context, *connect_go.Request[v1beta1.GetPRRequest]) (*connect_go.Response[v1beta1.GetPRResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetPR is not implemented"))
}

func (UnimplementedBFFServiceHandler) MergePR(context.Context, *connect_go.Request[v1beta1.MergePRRequest]) (*connect_go.Response[v1beta1.MergePRResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.MergePR is not implemented"))
}

func (UnimplementedBFFServiceHandler) CreateBranch(context.Context, *connect_go.Request[v1beta1.CreateBranchRequest]) (*connect_go.Response[v1beta1.CreateBranchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.CreateBranch is not implemented"))
}

func (UnimplementedBFFServiceHandler) ListBranches(context.Context, *connect_go.Request[v1beta1.ListBranchesRequest]) (*connect_go.Response[v1beta1.ListBranchesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.ListBranches is not implemented"))
}

func (UnimplementedBFFServiceHandler) DeleteBranch(context.Context, *connect_go.Request[v1beta1.DeleteBranchRequest]) (*connect_go.Response[v1beta1.DeleteBranchResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.DeleteBranch is not implemented"))
}

func (UnimplementedBFFServiceHandler) Save(context.Context, *connect_go.Request[v1beta1.SaveRequest]) (*connect_go.Response[v1beta1.SaveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.Save is not implemented"))
}

func (UnimplementedBFFServiceHandler) Review(context.Context, *connect_go.Request[v1beta1.ReviewRequest]) (*connect_go.Response[v1beta1.ReviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.Review is not implemented"))
}

func (UnimplementedBFFServiceHandler) Merge(context.Context, *connect_go.Request[v1beta1.MergeRequest]) (*connect_go.Response[v1beta1.MergeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.Merge is not implemented"))
}

func (UnimplementedBFFServiceHandler) Eval(context.Context, *connect_go.Request[v1beta1.EvalRequest]) (*connect_go.Response[v1beta1.EvalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.Eval is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.GetFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.GetFlagEvaluationMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetFlagEvaluationMetrics is not implemented"))
}

func (UnimplementedBFFServiceHandler) Restore(context.Context, *connect_go.Request[v1beta1.RestoreRequest]) (*connect_go.Response[v1beta1.RestoreResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.Restore is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetRepositoryLogs(context.Context, *connect_go.Request[v1beta1.GetRepositoryLogsRequest]) (*connect_go.Response[v1beta1.GetRepositoryLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetRepositoryLogs is not implemented"))
}

func (UnimplementedBFFServiceHandler) GetRollout(context.Context, *connect_go.Request[v1beta1.GetRolloutRequest]) (*connect_go.Response[v1beta1.GetRolloutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.bff.v1beta1.BFFService.GetRollout is not implemented"))
}
