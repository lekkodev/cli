// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lekko/backend/v1beta1/distribution_service.proto

package backendv1beta1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1beta1 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/backend/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DistributionServiceName is the fully-qualified name of the DistributionService service.
	DistributionServiceName = "lekko.backend.v1beta1.DistributionService"
)

// DistributionServiceClient is a client for the lekko.backend.v1beta1.DistributionService service.
type DistributionServiceClient interface {
	// Returns the latest commit sha of the repository. The client is expected to poll this
	// rpc to become aware of updates.
	GetRepositoryVersion(context.Context, *connect_go.Request[v1beta1.GetRepositoryVersionRequest]) (*connect_go.Response[v1beta1.GetRepositoryVersionResponse], error)
	// Returns the entire state of the repository, including all feature flags.
	GetRepositoryContents(context.Context, *connect_go.Request[v1beta1.GetRepositoryContentsRequest]) (*connect_go.Response[v1beta1.GetRepositoryContentsResponse], error)
	// Sends metrics to the backend related to flag evaluation. This rpc can be used
	// to batch metrics to lekko servers.
	SendFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.SendFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.SendFlagEvaluationMetricsResponse], error)
	// Registers a client and returns a session key.
	RegisterClient(context.Context, *connect_go.Request[v1beta1.RegisterClientRequest]) (*connect_go.Response[v1beta1.RegisterClientResponse], error)
	// Deregisters a client using a session key.
	DeregisterClient(context.Context, *connect_go.Request[v1beta1.DeregisterClientRequest]) (*connect_go.Response[v1beta1.DeregisterClientResponse], error)
}

// NewDistributionServiceClient constructs a client for the
// lekko.backend.v1beta1.DistributionService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDistributionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DistributionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &distributionServiceClient{
		getRepositoryVersion: connect_go.NewClient[v1beta1.GetRepositoryVersionRequest, v1beta1.GetRepositoryVersionResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.DistributionService/GetRepositoryVersion",
			opts...,
		),
		getRepositoryContents: connect_go.NewClient[v1beta1.GetRepositoryContentsRequest, v1beta1.GetRepositoryContentsResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.DistributionService/GetRepositoryContents",
			opts...,
		),
		sendFlagEvaluationMetrics: connect_go.NewClient[v1beta1.SendFlagEvaluationMetricsRequest, v1beta1.SendFlagEvaluationMetricsResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.DistributionService/SendFlagEvaluationMetrics",
			opts...,
		),
		registerClient: connect_go.NewClient[v1beta1.RegisterClientRequest, v1beta1.RegisterClientResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.DistributionService/RegisterClient",
			opts...,
		),
		deregisterClient: connect_go.NewClient[v1beta1.DeregisterClientRequest, v1beta1.DeregisterClientResponse](
			httpClient,
			baseURL+"/lekko.backend.v1beta1.DistributionService/DeregisterClient",
			opts...,
		),
	}
}

// distributionServiceClient implements DistributionServiceClient.
type distributionServiceClient struct {
	getRepositoryVersion      *connect_go.Client[v1beta1.GetRepositoryVersionRequest, v1beta1.GetRepositoryVersionResponse]
	getRepositoryContents     *connect_go.Client[v1beta1.GetRepositoryContentsRequest, v1beta1.GetRepositoryContentsResponse]
	sendFlagEvaluationMetrics *connect_go.Client[v1beta1.SendFlagEvaluationMetricsRequest, v1beta1.SendFlagEvaluationMetricsResponse]
	registerClient            *connect_go.Client[v1beta1.RegisterClientRequest, v1beta1.RegisterClientResponse]
	deregisterClient          *connect_go.Client[v1beta1.DeregisterClientRequest, v1beta1.DeregisterClientResponse]
}

// GetRepositoryVersion calls lekko.backend.v1beta1.DistributionService.GetRepositoryVersion.
func (c *distributionServiceClient) GetRepositoryVersion(ctx context.Context, req *connect_go.Request[v1beta1.GetRepositoryVersionRequest]) (*connect_go.Response[v1beta1.GetRepositoryVersionResponse], error) {
	return c.getRepositoryVersion.CallUnary(ctx, req)
}

// GetRepositoryContents calls lekko.backend.v1beta1.DistributionService.GetRepositoryContents.
func (c *distributionServiceClient) GetRepositoryContents(ctx context.Context, req *connect_go.Request[v1beta1.GetRepositoryContentsRequest]) (*connect_go.Response[v1beta1.GetRepositoryContentsResponse], error) {
	return c.getRepositoryContents.CallUnary(ctx, req)
}

// SendFlagEvaluationMetrics calls
// lekko.backend.v1beta1.DistributionService.SendFlagEvaluationMetrics.
func (c *distributionServiceClient) SendFlagEvaluationMetrics(ctx context.Context, req *connect_go.Request[v1beta1.SendFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.SendFlagEvaluationMetricsResponse], error) {
	return c.sendFlagEvaluationMetrics.CallUnary(ctx, req)
}

// RegisterClient calls lekko.backend.v1beta1.DistributionService.RegisterClient.
func (c *distributionServiceClient) RegisterClient(ctx context.Context, req *connect_go.Request[v1beta1.RegisterClientRequest]) (*connect_go.Response[v1beta1.RegisterClientResponse], error) {
	return c.registerClient.CallUnary(ctx, req)
}

// DeregisterClient calls lekko.backend.v1beta1.DistributionService.DeregisterClient.
func (c *distributionServiceClient) DeregisterClient(ctx context.Context, req *connect_go.Request[v1beta1.DeregisterClientRequest]) (*connect_go.Response[v1beta1.DeregisterClientResponse], error) {
	return c.deregisterClient.CallUnary(ctx, req)
}

// DistributionServiceHandler is an implementation of the lekko.backend.v1beta1.DistributionService
// service.
type DistributionServiceHandler interface {
	// Returns the latest commit sha of the repository. The client is expected to poll this
	// rpc to become aware of updates.
	GetRepositoryVersion(context.Context, *connect_go.Request[v1beta1.GetRepositoryVersionRequest]) (*connect_go.Response[v1beta1.GetRepositoryVersionResponse], error)
	// Returns the entire state of the repository, including all feature flags.
	GetRepositoryContents(context.Context, *connect_go.Request[v1beta1.GetRepositoryContentsRequest]) (*connect_go.Response[v1beta1.GetRepositoryContentsResponse], error)
	// Sends metrics to the backend related to flag evaluation. This rpc can be used
	// to batch metrics to lekko servers.
	SendFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.SendFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.SendFlagEvaluationMetricsResponse], error)
	// Registers a client and returns a session key.
	RegisterClient(context.Context, *connect_go.Request[v1beta1.RegisterClientRequest]) (*connect_go.Response[v1beta1.RegisterClientResponse], error)
	// Deregisters a client using a session key.
	DeregisterClient(context.Context, *connect_go.Request[v1beta1.DeregisterClientRequest]) (*connect_go.Response[v1beta1.DeregisterClientResponse], error)
}

// NewDistributionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDistributionServiceHandler(svc DistributionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/lekko.backend.v1beta1.DistributionService/GetRepositoryVersion", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.DistributionService/GetRepositoryVersion",
		svc.GetRepositoryVersion,
		opts...,
	))
	mux.Handle("/lekko.backend.v1beta1.DistributionService/GetRepositoryContents", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.DistributionService/GetRepositoryContents",
		svc.GetRepositoryContents,
		opts...,
	))
	mux.Handle("/lekko.backend.v1beta1.DistributionService/SendFlagEvaluationMetrics", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.DistributionService/SendFlagEvaluationMetrics",
		svc.SendFlagEvaluationMetrics,
		opts...,
	))
	mux.Handle("/lekko.backend.v1beta1.DistributionService/RegisterClient", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.DistributionService/RegisterClient",
		svc.RegisterClient,
		opts...,
	))
	mux.Handle("/lekko.backend.v1beta1.DistributionService/DeregisterClient", connect_go.NewUnaryHandler(
		"/lekko.backend.v1beta1.DistributionService/DeregisterClient",
		svc.DeregisterClient,
		opts...,
	))
	return "/lekko.backend.v1beta1.DistributionService/", mux
}

// UnimplementedDistributionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDistributionServiceHandler struct{}

func (UnimplementedDistributionServiceHandler) GetRepositoryVersion(context.Context, *connect_go.Request[v1beta1.GetRepositoryVersionRequest]) (*connect_go.Response[v1beta1.GetRepositoryVersionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.DistributionService.GetRepositoryVersion is not implemented"))
}

func (UnimplementedDistributionServiceHandler) GetRepositoryContents(context.Context, *connect_go.Request[v1beta1.GetRepositoryContentsRequest]) (*connect_go.Response[v1beta1.GetRepositoryContentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.DistributionService.GetRepositoryContents is not implemented"))
}

func (UnimplementedDistributionServiceHandler) SendFlagEvaluationMetrics(context.Context, *connect_go.Request[v1beta1.SendFlagEvaluationMetricsRequest]) (*connect_go.Response[v1beta1.SendFlagEvaluationMetricsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.DistributionService.SendFlagEvaluationMetrics is not implemented"))
}

func (UnimplementedDistributionServiceHandler) RegisterClient(context.Context, *connect_go.Request[v1beta1.RegisterClientRequest]) (*connect_go.Response[v1beta1.RegisterClientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.DistributionService.RegisterClient is not implemented"))
}

func (UnimplementedDistributionServiceHandler) DeregisterClient(context.Context, *connect_go.Request[v1beta1.DeregisterClientRequest]) (*connect_go.Response[v1beta1.DeregisterClientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lekko.backend.v1beta1.DistributionService.DeregisterClient is not implemented"))
}
