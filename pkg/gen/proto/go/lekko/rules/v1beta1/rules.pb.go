// Copyright 2020-2022 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: lekko/rules/v1beta1/rules.proto

package rulesv1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_BOOL        Type = 1
	Type_TYPE_NUMBER      Type = 2
	Type_TYPE_STRING      Type = 3
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_BOOL",
		2: "TYPE_NUMBER",
		3: "TYPE_STRING",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_BOOL":        1,
		"TYPE_NUMBER":      2,
		"TYPE_STRING":      3,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_rules_v1beta1_rules_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_lekko_rules_v1beta1_rules_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{0}
}

type LogicalOperator int32

const (
	LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED LogicalOperator = 0
	LogicalOperator_LOGICAL_OPERATOR_EQUALS      LogicalOperator = 1
	// > < >= <= only applies to number values.
	LogicalOperator_LOGICAL_OPERATOR_LESS_THAN              LogicalOperator = 2
	LogicalOperator_LOGICAL_OPERATOR_LESS_THAN_OR_EQUALS    LogicalOperator = 3
	LogicalOperator_LOGICAL_OPERATOR_GREATER_THAN           LogicalOperator = 4
	LogicalOperator_LOGICAL_OPERATOR_GREATER_THAN_OR_EQUALS LogicalOperator = 5
	// Contained within or not contained within only applies to list values.
	LogicalOperator_LOGICAL_OPERATOR_CONTAINED_WITHIN     LogicalOperator = 6
	LogicalOperator_LOGICAL_OPERATOR_NOT_CONTAINED_WITHIN LogicalOperator = 7
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0: "LOGICAL_OPERATOR_UNSPECIFIED",
		1: "LOGICAL_OPERATOR_EQUALS",
		2: "LOGICAL_OPERATOR_LESS_THAN",
		3: "LOGICAL_OPERATOR_LESS_THAN_OR_EQUALS",
		4: "LOGICAL_OPERATOR_GREATER_THAN",
		5: "LOGICAL_OPERATOR_GREATER_THAN_OR_EQUALS",
		6: "LOGICAL_OPERATOR_CONTAINED_WITHIN",
		7: "LOGICAL_OPERATOR_NOT_CONTAINED_WITHIN",
	}
	LogicalOperator_value = map[string]int32{
		"LOGICAL_OPERATOR_UNSPECIFIED":            0,
		"LOGICAL_OPERATOR_EQUALS":                 1,
		"LOGICAL_OPERATOR_LESS_THAN":              2,
		"LOGICAL_OPERATOR_LESS_THAN_OR_EQUALS":    3,
		"LOGICAL_OPERATOR_GREATER_THAN":           4,
		"LOGICAL_OPERATOR_GREATER_THAN_OR_EQUALS": 5,
		"LOGICAL_OPERATOR_CONTAINED_WITHIN":       6,
		"LOGICAL_OPERATOR_NOT_CONTAINED_WITHIN":   7,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_rules_v1beta1_rules_proto_enumTypes[1].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_lekko_rules_v1beta1_rules_proto_enumTypes[1]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{1}
}

type ConditionLinker int32

const (
	ConditionLinker_CONDITION_LINKER_UNSPECIFIED ConditionLinker = 0
	ConditionLinker_CONDITION_LINKER_AND         ConditionLinker = 1
	ConditionLinker_CONDITION_LINKER_OR          ConditionLinker = 2
)

// Enum value maps for ConditionLinker.
var (
	ConditionLinker_name = map[int32]string{
		0: "CONDITION_LINKER_UNSPECIFIED",
		1: "CONDITION_LINKER_AND",
		2: "CONDITION_LINKER_OR",
	}
	ConditionLinker_value = map[string]int32{
		"CONDITION_LINKER_UNSPECIFIED": 0,
		"CONDITION_LINKER_AND":         1,
		"CONDITION_LINKER_OR":          2,
	}
)

func (x ConditionLinker) Enum() *ConditionLinker {
	p := new(ConditionLinker)
	*p = x
	return p
}

func (x ConditionLinker) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionLinker) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_rules_v1beta1_rules_proto_enumTypes[2].Descriptor()
}

func (ConditionLinker) Type() protoreflect.EnumType {
	return &file_lekko_rules_v1beta1_rules_proto_enumTypes[2]
}

func (x ConditionLinker) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionLinker.Descriptor instead.
func (ConditionLinker) EnumDescriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{2}
}

type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditions []*Condition `protobuf:"bytes,1,rep,name=conditions,proto3" json:"conditions,omitempty"`
	// For now, we will only allow one condition linker that applies
	// to all sets of conditions where len(conditions) > 1. This will be
	// unset when len(conditions) == 1.
	ConditionLinker ConditionLinker `protobuf:"varint,2,opt,name=condition_linker,json=conditionLinker,proto3,enum=lekko.rules.v1beta1.ConditionLinker" json:"condition_linker,omitempty"`
	ResultingValue  *structpb.Value `protobuf:"bytes,3,opt,name=resulting_value,json=resultingValue,proto3" json:"resulting_value,omitempty"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{0}
}

func (x *Constraint) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Constraint) GetConditionLinker() ConditionLinker {
	if x != nil {
		return x.ConditionLinker
	}
	return ConditionLinker_CONDITION_LINKER_UNSPECIFIED
}

func (x *Constraint) GetResultingValue() *structpb.Value {
	if x != nil {
		return x.ResultingValue
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextKey      string          `protobuf:"bytes,1,opt,name=context_key,json=contextKey,proto3" json:"context_key,omitempty"`
	ComparisonValue *structpb.Value `protobuf:"bytes,2,opt,name=comparison_value,json=comparisonValue,proto3" json:"comparison_value,omitempty"`
	// For operators, context is on the left, comparison value on the right.
	LogicalOperator LogicalOperator `protobuf:"varint,3,opt,name=logical_operator,json=logicalOperator,proto3,enum=lekko.rules.v1beta1.LogicalOperator" json:"logical_operator,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{1}
}

func (x *Condition) GetContextKey() string {
	if x != nil {
		return x.ContextKey
	}
	return ""
}

func (x *Condition) GetComparisonValue() *structpb.Value {
	if x != nil {
		return x.ComparisonValue
	}
	return nil
}

func (x *Condition) GetLogicalOperator() LogicalOperator {
	if x != nil {
		return x.LogicalOperator
	}
	return LogicalOperator_LOGICAL_OPERATOR_UNSPECIFIED
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type         Type            `protobuf:"varint,2,opt,name=type,proto3,enum=lekko.rules.v1beta1.Type" json:"type,omitempty"`
	DefaultValue *structpb.Value `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	Constraints  []*Constraint   `protobuf:"bytes,4,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_rules_v1beta1_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_lekko_rules_v1beta1_rules_proto_rawDescGZIP(), []int{2}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

func (x *Feature) GetDefaultValue() *structpb.Value {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *Feature) GetConstraints() []*Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

var File_lekko_rules_v1beta1_rules_proto protoreflect.FileDescriptor

var file_lekko_rules_v1beta1_rules_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x4d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0xbc, 0x02, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x49, 0x4e, 0x10, 0x07, 0x2a, 0x66, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x10, 0x02, 0x42, 0xde, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x64, 0x65, 0x76, 0x2f, 0x63, 0x6c, 0x69,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x52, 0x58, 0xaa, 0x02, 0x13, 0x4c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02,
	0x13, 0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x5c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x5c, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x3a, 0x3a,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lekko_rules_v1beta1_rules_proto_rawDescOnce sync.Once
	file_lekko_rules_v1beta1_rules_proto_rawDescData = file_lekko_rules_v1beta1_rules_proto_rawDesc
)

func file_lekko_rules_v1beta1_rules_proto_rawDescGZIP() []byte {
	file_lekko_rules_v1beta1_rules_proto_rawDescOnce.Do(func() {
		file_lekko_rules_v1beta1_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_lekko_rules_v1beta1_rules_proto_rawDescData)
	})
	return file_lekko_rules_v1beta1_rules_proto_rawDescData
}

var file_lekko_rules_v1beta1_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_lekko_rules_v1beta1_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_lekko_rules_v1beta1_rules_proto_goTypes = []interface{}{
	(Type)(0),              // 0: lekko.rules.v1beta1.Type
	(LogicalOperator)(0),   // 1: lekko.rules.v1beta1.LogicalOperator
	(ConditionLinker)(0),   // 2: lekko.rules.v1beta1.ConditionLinker
	(*Constraint)(nil),     // 3: lekko.rules.v1beta1.Constraint
	(*Condition)(nil),      // 4: lekko.rules.v1beta1.Condition
	(*Feature)(nil),        // 5: lekko.rules.v1beta1.Feature
	(*structpb.Value)(nil), // 6: google.protobuf.Value
}
var file_lekko_rules_v1beta1_rules_proto_depIdxs = []int32{
	4, // 0: lekko.rules.v1beta1.Constraint.conditions:type_name -> lekko.rules.v1beta1.Condition
	2, // 1: lekko.rules.v1beta1.Constraint.condition_linker:type_name -> lekko.rules.v1beta1.ConditionLinker
	6, // 2: lekko.rules.v1beta1.Constraint.resulting_value:type_name -> google.protobuf.Value
	6, // 3: lekko.rules.v1beta1.Condition.comparison_value:type_name -> google.protobuf.Value
	1, // 4: lekko.rules.v1beta1.Condition.logical_operator:type_name -> lekko.rules.v1beta1.LogicalOperator
	0, // 5: lekko.rules.v1beta1.Feature.type:type_name -> lekko.rules.v1beta1.Type
	6, // 6: lekko.rules.v1beta1.Feature.default_value:type_name -> google.protobuf.Value
	3, // 7: lekko.rules.v1beta1.Feature.constraints:type_name -> lekko.rules.v1beta1.Constraint
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_lekko_rules_v1beta1_rules_proto_init() }
func file_lekko_rules_v1beta1_rules_proto_init() {
	if File_lekko_rules_v1beta1_rules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lekko_rules_v1beta1_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_rules_v1beta1_rules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_rules_v1beta1_rules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lekko_rules_v1beta1_rules_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lekko_rules_v1beta1_rules_proto_goTypes,
		DependencyIndexes: file_lekko_rules_v1beta1_rules_proto_depIdxs,
		EnumInfos:         file_lekko_rules_v1beta1_rules_proto_enumTypes,
		MessageInfos:      file_lekko_rules_v1beta1_rules_proto_msgTypes,
	}.Build()
	File_lekko_rules_v1beta1_rules_proto = out.File
	file_lekko_rules_v1beta1_rules_proto_rawDesc = nil
	file_lekko_rules_v1beta1_rules_proto_goTypes = nil
	file_lekko_rules_v1beta1_rules_proto_depIdxs = nil
}
