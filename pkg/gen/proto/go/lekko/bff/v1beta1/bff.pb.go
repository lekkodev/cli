// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: lekko/bff/v1beta1/bff.proto

package bffv1beta1

import (
	v1beta11 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/backend/v1beta1"
	v1beta1 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/feature/v1beta1"
	v1beta3 "github.com/lekkodev/cli/pkg/gen/proto/go/lekko/rules/v1beta3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MembershipRole int32

const (
	MembershipRole_MEMBERSHIP_ROLE_UNSPECIFIED MembershipRole = 0
	MembershipRole_MEMBERSHIP_ROLE_MEMBER      MembershipRole = 1
	MembershipRole_MEMBERSHIP_ROLE_OWNER       MembershipRole = 2
)

// Enum value maps for MembershipRole.
var (
	MembershipRole_name = map[int32]string{
		0: "MEMBERSHIP_ROLE_UNSPECIFIED",
		1: "MEMBERSHIP_ROLE_MEMBER",
		2: "MEMBERSHIP_ROLE_OWNER",
	}
	MembershipRole_value = map[string]int32{
		"MEMBERSHIP_ROLE_UNSPECIFIED": 0,
		"MEMBERSHIP_ROLE_MEMBER":      1,
		"MEMBERSHIP_ROLE_OWNER":       2,
	}
)

func (x MembershipRole) Enum() *MembershipRole {
	p := new(MembershipRole)
	*p = x
	return p
}

func (x MembershipRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MembershipRole) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_bff_v1beta1_bff_proto_enumTypes[0].Descriptor()
}

func (MembershipRole) Type() protoreflect.EnumType {
	return &file_lekko_bff_v1beta1_bff_proto_enumTypes[0]
}

func (x MembershipRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MembershipRole.Descriptor instead.
func (MembershipRole) EnumDescriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{0}
}

type FeatureType int32

const (
	FeatureType_FEATURE_TYPE_UNSPECIFIED FeatureType = 0
	FeatureType_FEATURE_TYPE_BOOL        FeatureType = 1
	FeatureType_FEATURE_TYPE_INT         FeatureType = 2
	FeatureType_FEATURE_TYPE_FLOAT       FeatureType = 3
	FeatureType_FEATURE_TYPE_STRING      FeatureType = 4
	FeatureType_FEATURE_TYPE_JSON        FeatureType = 5
	FeatureType_FEATURE_TYPE_PROTO       FeatureType = 6
)

// Enum value maps for FeatureType.
var (
	FeatureType_name = map[int32]string{
		0: "FEATURE_TYPE_UNSPECIFIED",
		1: "FEATURE_TYPE_BOOL",
		2: "FEATURE_TYPE_INT",
		3: "FEATURE_TYPE_FLOAT",
		4: "FEATURE_TYPE_STRING",
		5: "FEATURE_TYPE_JSON",
		6: "FEATURE_TYPE_PROTO",
	}
	FeatureType_value = map[string]int32{
		"FEATURE_TYPE_UNSPECIFIED": 0,
		"FEATURE_TYPE_BOOL":        1,
		"FEATURE_TYPE_INT":         2,
		"FEATURE_TYPE_FLOAT":       3,
		"FEATURE_TYPE_STRING":      4,
		"FEATURE_TYPE_JSON":        5,
		"FEATURE_TYPE_PROTO":       6,
	}
)

func (x FeatureType) Enum() *FeatureType {
	p := new(FeatureType)
	*p = x
	return p
}

func (x FeatureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureType) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_bff_v1beta1_bff_proto_enumTypes[1].Descriptor()
}

func (FeatureType) Type() protoreflect.EnumType {
	return &file_lekko_bff_v1beta1_bff_proto_enumTypes[1]
}

func (x FeatureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureType.Descriptor instead.
func (FeatureType) EnumDescriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{1}
}

type ChecksState int32

const (
	ChecksState_CHECKS_STATE_UNSPECIFIED ChecksState = 0
	ChecksState_CHECKS_STATE_IN_PROGRESS ChecksState = 1
	ChecksState_CHECKS_STATE_PASSED      ChecksState = 2
	ChecksState_CHECKS_STATE_FAILED      ChecksState = 3
)

// Enum value maps for ChecksState.
var (
	ChecksState_name = map[int32]string{
		0: "CHECKS_STATE_UNSPECIFIED",
		1: "CHECKS_STATE_IN_PROGRESS",
		2: "CHECKS_STATE_PASSED",
		3: "CHECKS_STATE_FAILED",
	}
	ChecksState_value = map[string]int32{
		"CHECKS_STATE_UNSPECIFIED": 0,
		"CHECKS_STATE_IN_PROGRESS": 1,
		"CHECKS_STATE_PASSED":      2,
		"CHECKS_STATE_FAILED":      3,
	}
)

func (x ChecksState) Enum() *ChecksState {
	p := new(ChecksState)
	*p = x
	return p
}

func (x ChecksState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChecksState) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_bff_v1beta1_bff_proto_enumTypes[2].Descriptor()
}

func (ChecksState) Type() protoreflect.EnumType {
	return &file_lekko_bff_v1beta1_bff_proto_enumTypes[2]
}

func (x ChecksState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChecksState.Descriptor instead.
func (ChecksState) EnumDescriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{2}
}

// Specifies whether or not this pull request can be merged.
type PullRequest_Mergeable int32

const (
	PullRequest_MERGEABLE_UNSPECIFIED PullRequest_Mergeable = 0
	// GitHub has not yet determined if the PR is mergeable or not.
	// Try again after some delay.
	PullRequest_MERGEABLE_PENDING PullRequest_Mergeable = 1
	// The PR has no merge conflicts with its base, and can be merged.
	PullRequest_MERGEABLE_TRUE PullRequest_Mergeable = 2
	// The PR has merge conflicts with its base. It can't be merged
	// in its current state.
	PullRequest_MERGEABLE_FALSE PullRequest_Mergeable = 3
)

// Enum value maps for PullRequest_Mergeable.
var (
	PullRequest_Mergeable_name = map[int32]string{
		0: "MERGEABLE_UNSPECIFIED",
		1: "MERGEABLE_PENDING",
		2: "MERGEABLE_TRUE",
		3: "MERGEABLE_FALSE",
	}
	PullRequest_Mergeable_value = map[string]int32{
		"MERGEABLE_UNSPECIFIED": 0,
		"MERGEABLE_PENDING":     1,
		"MERGEABLE_TRUE":        2,
		"MERGEABLE_FALSE":       3,
	}
)

func (x PullRequest_Mergeable) Enum() *PullRequest_Mergeable {
	p := new(PullRequest_Mergeable)
	*p = x
	return p
}

func (x PullRequest_Mergeable) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PullRequest_Mergeable) Descriptor() protoreflect.EnumDescriptor {
	return file_lekko_bff_v1beta1_bff_proto_enumTypes[3].Descriptor()
}

func (PullRequest_Mergeable) Type() protoreflect.EnumType {
	return &file_lekko_bff_v1beta1_bff_proto_enumTypes[3]
}

func (x PullRequest_Mergeable) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PullRequest_Mergeable.Descriptor instead.
func (PullRequest_Mergeable) EnumDescriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{66, 0}
}

type GetUserLoggedInInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserLoggedInInfoRequest) Reset() {
	*x = GetUserLoggedInInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserLoggedInInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoggedInInfoRequest) ProtoMessage() {}

func (x *GetUserLoggedInInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoggedInInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserLoggedInInfoRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{0}
}

type GetUserLoggedInInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TeamName string `protobuf:"bytes,2,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
}

func (x *GetUserLoggedInInfoResponse) Reset() {
	*x = GetUserLoggedInInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserLoggedInInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserLoggedInInfoResponse) ProtoMessage() {}

func (x *GetUserLoggedInInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserLoggedInInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserLoggedInInfoResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserLoggedInInfoResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetUserLoggedInInfoResponse) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

type ChangePasswordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword,proto3" json:"old_password,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword,proto3" json:"new_password,omitempty"`
}

func (x *ChangePasswordRequest) Reset() {
	*x = ChangePasswordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordRequest) ProtoMessage() {}

func (x *ChangePasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordRequest.ProtoReflect.Descriptor instead.
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{2}
}

func (x *ChangePasswordRequest) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *ChangePasswordRequest) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangePasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePasswordResponse) Reset() {
	*x = ChangePasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResponse) ProtoMessage() {}

func (x *ChangePasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResponse.ProtoReflect.Descriptor instead.
func (*ChangePasswordResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{3}
}

type GenerateAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String to be associated with this api key.
	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *GenerateAPIKeyRequest) Reset() {
	*x = GenerateAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAPIKeyRequest) ProtoMessage() {}

func (x *GenerateAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*GenerateAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{4}
}

func (x *GenerateAPIKeyRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GenerateAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GenerateAPIKeyResponse) Reset() {
	*x = GenerateAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAPIKeyResponse) ProtoMessage() {}

func (x *GenerateAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*GenerateAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{5}
}

func (x *GenerateAPIKeyResponse) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type APIKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName string `protobuf:"bytes,1,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	Nickname string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// Lekko username of the user who created the api key
	CreatedBy string                 `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *APIKey) Reset() {
	*x = APIKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIKey) ProtoMessage() {}

func (x *APIKey) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIKey.ProtoReflect.Descriptor instead.
func (*APIKey) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{6}
}

func (x *APIKey) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *APIKey) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *APIKey) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *APIKey) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ListAPIKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAPIKeysRequest) Reset() {
	*x = ListAPIKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPIKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPIKeysRequest) ProtoMessage() {}

func (x *ListAPIKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPIKeysRequest.ProtoReflect.Descriptor instead.
func (*ListAPIKeysRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{7}
}

type ListAPIKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKeys []*APIKey `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
}

func (x *ListAPIKeysResponse) Reset() {
	*x = ListAPIKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAPIKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAPIKeysResponse) ProtoMessage() {}

func (x *ListAPIKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAPIKeysResponse.ProtoReflect.Descriptor instead.
func (*ListAPIKeysResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{8}
}

func (x *ListAPIKeysResponse) GetApiKeys() []*APIKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

type DeleteAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname,omitempty"`
}

func (x *DeleteAPIKeyRequest) Reset() {
	*x = DeleteAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIKeyRequest) ProtoMessage() {}

func (x *DeleteAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteAPIKeyRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type DeleteAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAPIKeyResponse) Reset() {
	*x = DeleteAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAPIKeyResponse) ProtoMessage() {}

func (x *DeleteAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{10}
}

type CheckAPIKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *CheckAPIKeyRequest) Reset() {
	*x = CheckAPIKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAPIKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAPIKeyRequest) ProtoMessage() {}

func (x *CheckAPIKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAPIKeyRequest.ProtoReflect.Descriptor instead.
func (*CheckAPIKeyRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{11}
}

func (x *CheckAPIKeyRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type CheckAPIKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *APIKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CheckAPIKeyResponse) Reset() {
	*x = CheckAPIKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAPIKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAPIKeyResponse) ProtoMessage() {}

func (x *CheckAPIKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAPIKeyResponse.ProtoReflect.Descriptor instead.
func (*CheckAPIKeyResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{12}
}

func (x *CheckAPIKeyResponse) GetKey() *APIKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type CreateTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateTeamRequest) Reset() {
	*x = CreateTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamRequest) ProtoMessage() {}

func (x *CreateTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTeamRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTeamResponse) Reset() {
	*x = CreateTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTeamResponse) ProtoMessage() {}

func (x *CreateTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTeamResponse.ProtoReflect.Descriptor instead.
func (*CreateTeamResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{14}
}

type DeleteTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTeamRequest) Reset() {
	*x = DeleteTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamRequest) ProtoMessage() {}

func (x *DeleteTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamRequest.ProtoReflect.Descriptor instead.
func (*DeleteTeamRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{15}
}

type DeleteTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTeamResponse) Reset() {
	*x = DeleteTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTeamResponse) ProtoMessage() {}

func (x *DeleteTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTeamResponse.ProtoReflect.Descriptor instead.
func (*DeleteTeamResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{16}
}

type UseTeamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UseTeamRequest) Reset() {
	*x = UseTeamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseTeamRequest) ProtoMessage() {}

func (x *UseTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseTeamRequest.ProtoReflect.Descriptor instead.
func (*UseTeamRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{17}
}

func (x *UseTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UseTeamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseTeamResponse) Reset() {
	*x = UseTeamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseTeamResponse) ProtoMessage() {}

func (x *UseTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseTeamResponse.ProtoReflect.Descriptor instead.
func (*UseTeamResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{18}
}

type Membership struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamName string         `protobuf:"bytes,1,opt,name=team_name,json=teamName,proto3" json:"team_name,omitempty"`
	Username string         `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Role     MembershipRole `protobuf:"varint,3,opt,name=role,proto3,enum=lekko.bff.v1beta1.MembershipRole" json:"role,omitempty"`
}

func (x *Membership) Reset() {
	*x = Membership{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Membership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Membership) ProtoMessage() {}

func (x *Membership) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Membership.ProtoReflect.Descriptor instead.
func (*Membership) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{19}
}

func (x *Membership) GetTeamName() string {
	if x != nil {
		return x.TeamName
	}
	return ""
}

func (x *Membership) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Membership) GetRole() MembershipRole {
	if x != nil {
		return x.Role
	}
	return MembershipRole_MEMBERSHIP_ROLE_UNSPECIFIED
}

type ListTeamMembershipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTeamMembershipsRequest) Reset() {
	*x = ListTeamMembershipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamMembershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamMembershipsRequest) ProtoMessage() {}

func (x *ListTeamMembershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamMembershipsRequest.ProtoReflect.Descriptor instead.
func (*ListTeamMembershipsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{20}
}

type ListTeamMembershipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships []*Membership `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
}

func (x *ListTeamMembershipsResponse) Reset() {
	*x = ListTeamMembershipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTeamMembershipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTeamMembershipsResponse) ProtoMessage() {}

func (x *ListTeamMembershipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTeamMembershipsResponse.ProtoReflect.Descriptor instead.
func (*ListTeamMembershipsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{21}
}

func (x *ListTeamMembershipsResponse) GetMemberships() []*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type ListUserMembershipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUserMembershipsRequest) Reset() {
	*x = ListUserMembershipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMembershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMembershipsRequest) ProtoMessage() {}

func (x *ListUserMembershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMembershipsRequest.ProtoReflect.Descriptor instead.
func (*ListUserMembershipsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{22}
}

type ListUserMembershipsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memberships []*Membership `protobuf:"bytes,1,rep,name=memberships,proto3" json:"memberships,omitempty"`
}

func (x *ListUserMembershipsResponse) Reset() {
	*x = ListUserMembershipsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMembershipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMembershipsResponse) ProtoMessage() {}

func (x *ListUserMembershipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMembershipsResponse.ProtoReflect.Descriptor instead.
func (*ListUserMembershipsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{23}
}

func (x *ListUserMembershipsResponse) GetMemberships() []*Membership {
	if x != nil {
		return x.Memberships
	}
	return nil
}

type UpsertMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User that you wish to add to the current team
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Role that you wish to assign
	Role MembershipRole `protobuf:"varint,2,opt,name=role,proto3,enum=lekko.bff.v1beta1.MembershipRole" json:"role,omitempty"`
}

func (x *UpsertMembershipRequest) Reset() {
	*x = UpsertMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMembershipRequest) ProtoMessage() {}

func (x *UpsertMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMembershipRequest.ProtoReflect.Descriptor instead.
func (*UpsertMembershipRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{24}
}

func (x *UpsertMembershipRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpsertMembershipRequest) GetRole() MembershipRole {
	if x != nil {
		return x.Role
	}
	return MembershipRole_MEMBERSHIP_ROLE_UNSPECIFIED
}

type UpsertMembershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Membership *Membership `protobuf:"bytes,1,opt,name=membership,proto3" json:"membership,omitempty"`
}

func (x *UpsertMembershipResponse) Reset() {
	*x = UpsertMembershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertMembershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertMembershipResponse) ProtoMessage() {}

func (x *UpsertMembershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertMembershipResponse.ProtoReflect.Descriptor instead.
func (*UpsertMembershipResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{25}
}

func (x *UpsertMembershipResponse) GetMembership() *Membership {
	if x != nil {
		return x.Membership
	}
	return nil
}

type RemoveMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User that you wish to remove from the current team
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *RemoveMembershipRequest) Reset() {
	*x = RemoveMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembershipRequest) ProtoMessage() {}

func (x *RemoveMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembershipRequest.ProtoReflect.Descriptor instead.
func (*RemoveMembershipRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveMembershipRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type RemoveMembershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMembershipResponse) Reset() {
	*x = RemoveMembershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMembershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMembershipResponse) ProtoMessage() {}

func (x *RemoveMembershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMembershipResponse.ProtoReflect.Descriptor instead.
func (*RemoveMembershipResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{27}
}

type RepositoryKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"` // github owner
	RepoName  string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
}

func (x *RepositoryKey) Reset() {
	*x = RepositoryKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryKey) ProtoMessage() {}

func (x *RepositoryKey) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryKey.ProtoReflect.Descriptor instead.
func (*RepositoryKey) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{28}
}

func (x *RepositoryKey) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *RepositoryKey) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

type CreateRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
}

func (x *CreateRepositoryRequest) Reset() {
	*x = CreateRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepositoryRequest) ProtoMessage() {}

func (x *CreateRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepositoryRequest.ProtoReflect.Descriptor instead.
func (*CreateRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{29}
}

func (x *CreateRepositoryRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

type CreateRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateRepositoryResponse) Reset() {
	*x = CreateRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRepositoryResponse) ProtoMessage() {}

func (x *CreateRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRepositoryResponse.ProtoReflect.Descriptor instead.
func (*CreateRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{30}
}

func (x *CreateRepositoryResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DeleteRepositoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
	// If provided, this rpc will also delete the repository upstream, e.g. on github.
	// This flag should probably depend on user preference.
	DeleteOnRemote bool `protobuf:"varint,2,opt,name=delete_on_remote,json=deleteOnRemote,proto3" json:"delete_on_remote,omitempty"`
}

func (x *DeleteRepositoryRequest) Reset() {
	*x = DeleteRepositoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryRequest) ProtoMessage() {}

func (x *DeleteRepositoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteRepositoryRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

func (x *DeleteRepositoryRequest) GetDeleteOnRemote() bool {
	if x != nil {
		return x.DeleteOnRemote
	}
	return false
}

type DeleteRepositoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRepositoryResponse) Reset() {
	*x = DeleteRepositoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRepositoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRepositoryResponse) ProtoMessage() {}

func (x *DeleteRepositoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRepositoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteRepositoryResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{32}
}

type ListRepositoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRepositoriesRequest) Reset() {
	*x = ListRepositoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesRequest) ProtoMessage() {}

func (x *ListRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{33}
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName            string                 `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepoName             string                 `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	GithubInstallationId int64                  `protobuf:"varint,3,opt,name=github_installation_id,json=githubInstallationId,proto3" json:"github_installation_id,omitempty"`
	CreatedAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Description          string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Url                  string                 `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{34}
}

func (x *Repository) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Repository) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *Repository) GetGithubInstallationId() int64 {
	if x != nil {
		return x.GithubInstallationId
	}
	return 0
}

func (x *Repository) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Repository) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Repository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Repository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ListRepositoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *ListRepositoriesResponse) Reset() {
	*x = ListRepositoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoriesResponse) ProtoMessage() {}

func (x *ListRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*ListRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{35}
}

func (x *ListRepositoriesResponse) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type ListNamespacesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
}

func (x *ListNamespacesRequest) Reset() {
	*x = ListNamespacesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesRequest) ProtoMessage() {}

func (x *ListNamespacesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesRequest.ProtoReflect.Descriptor instead.
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{36}
}

func (x *ListNamespacesRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

type ListNamespacesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*Namespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *ListNamespacesResponse) Reset() {
	*x = ListNamespacesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNamespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespacesResponse) ProtoMessage() {}

func (x *ListNamespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespacesResponse.ProtoReflect.Descriptor instead.
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{37}
}

func (x *ListNamespacesResponse) GetNamespaces() []*Namespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version   string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{38}
}

func (x *Namespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Namespace) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Namespace) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type ListFeaturesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey       *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
	NamespaceName string         `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"` // optional
}

func (x *ListFeaturesRequest) Reset() {
	*x = ListFeaturesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturesRequest) ProtoMessage() {}

func (x *ListFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ListFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{39}
}

func (x *ListFeaturesRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

func (x *ListFeaturesRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

type ListFeaturesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features []*ListFeaturesResponse_FeatureListItem `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ListFeaturesResponse) Reset() {
	*x = ListFeaturesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturesResponse) ProtoMessage() {}

func (x *ListFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ListFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{40}
}

func (x *ListFeaturesResponse) GetFeatures() []*ListFeaturesResponse_FeatureListItem {
	if x != nil {
		return x.Features
	}
	return nil
}

type ListRepositoryContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ListRepositoryContentsRequest) Reset() {
	*x = ListRepositoryContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryContentsRequest) ProtoMessage() {}

func (x *ListRepositoryContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryContentsRequest.ProtoReflect.Descriptor instead.
func (*ListRepositoryContentsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{41}
}

func (x *ListRepositoryContentsRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ListRepositoryContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*ListRepositoryContentsResponse_NamespaceListItem `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// The parent branch of these repository contents
	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *ListRepositoryContentsResponse) Reset() {
	*x = ListRepositoryContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryContentsResponse) ProtoMessage() {}

func (x *ListRepositoryContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryContentsResponse.ProtoReflect.Descriptor instead.
func (*ListRepositoryContentsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{42}
}

func (x *ListRepositoryContentsResponse) GetNamespaces() []*ListRepositoryContentsResponse_NamespaceListItem {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ListRepositoryContentsResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type NamespaceContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*NamespaceContents_NamespaceListItem `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
}

func (x *NamespaceContents) Reset() {
	*x = NamespaceContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceContents) ProtoMessage() {}

func (x *NamespaceContents) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceContents.ProtoReflect.Descriptor instead.
func (*NamespaceContents) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{43}
}

func (x *NamespaceContents) GetNamespaces() []*NamespaceContents_NamespaceListItem {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type GetRepositoryContentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The feature contents that should be returned.
	// If empty, no feature is returned. If either
	// one of the following two fields are provided,
	// the other one must be provided as well.
	NamespaceName string `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *GetRepositoryContentsRequest) Reset() {
	*x = GetRepositoryContentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryContentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryContentsRequest) ProtoMessage() {}

func (x *GetRepositoryContentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryContentsRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoryContentsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{44}
}

func (x *GetRepositoryContentsRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetRepositoryContentsRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *GetRepositoryContentsRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type GetRepositoryContentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
	Feature           *Feature           `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *GetRepositoryContentsResponse) Reset() {
	*x = GetRepositoryContentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryContentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryContentsResponse) ProtoMessage() {}

func (x *GetRepositoryContentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryContentsResponse.ProtoReflect.Descriptor instead.
func (*GetRepositoryContentsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{45}
}

func (x *GetRepositoryContentsResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *GetRepositoryContentsResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

func (x *GetRepositoryContentsResponse) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type GetFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// includes the branch name to fetch from. If 'main',
	// we will fetch from mysql. If not, we will fetch
	// from the appropriate development session.
	Key           *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamespaceName string     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string     `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *GetFeatureRequest) Reset() {
	*x = GetFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureRequest) ProtoMessage() {}

func (x *GetFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{46}
}

func (x *GetFeatureRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *GetFeatureRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *GetFeatureRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type GetFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature *Feature `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	// The parent branch of this feature
	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *GetFeatureResponse) Reset() {
	*x = GetFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureResponse) ProtoMessage() {}

func (x *GetFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureResponse.ProtoReflect.Descriptor instead.
func (*GetFeatureResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{47}
}

func (x *GetFeatureResponse) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *GetFeatureResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NamespaceName string `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	Json          []byte `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
	Star          []byte `protobuf:"bytes,4,opt,name=star,proto3" json:"star,omitempty"`
	// This field will only be populated if we are able to
	// statically parse the requested feature.
	StaticFeature *v1beta1.Feature `protobuf:"bytes,5,opt,name=static_feature,json=staticFeature,proto3" json:"static_feature,omitempty"`
	// the blob sha of the proto bin file according to git
	Sha string `protobuf:"bytes,6,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{48}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *Feature) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

func (x *Feature) GetStar() []byte {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *Feature) GetStaticFeature() *v1beta1.Feature {
	if x != nil {
		return x.StaticFeature
	}
	return nil
}

func (x *Feature) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type AddNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamespaceName string     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
}

func (x *AddNamespaceRequest) Reset() {
	*x = AddNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNamespaceRequest) ProtoMessage() {}

func (x *AddNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNamespaceRequest.ProtoReflect.Descriptor instead.
func (*AddNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{49}
}

func (x *AddNamespaceRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddNamespaceRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

type AddNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
}

func (x *AddNamespaceResponse) Reset() {
	*x = AddNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNamespaceResponse) ProtoMessage() {}

func (x *AddNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNamespaceResponse.ProtoReflect.Descriptor instead.
func (*AddNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{50}
}

func (x *AddNamespaceResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *AddNamespaceResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

type RemoveNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamespaceName string     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
}

func (x *RemoveNamespaceRequest) Reset() {
	*x = RemoveNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNamespaceRequest) ProtoMessage() {}

func (x *RemoveNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNamespaceRequest.ProtoReflect.Descriptor instead.
func (*RemoveNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{51}
}

func (x *RemoveNamespaceRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RemoveNamespaceRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

type RemoveNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
}

func (x *RemoveNamespaceResponse) Reset() {
	*x = RemoveNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNamespaceResponse) ProtoMessage() {}

func (x *RemoveNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNamespaceResponse.ProtoReflect.Descriptor instead.
func (*RemoveNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{52}
}

func (x *RemoveNamespaceResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RemoveNamespaceResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

type AddFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamespaceName string     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string     `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	// Deprecated: Do not use.
	Type    FeatureType         `protobuf:"varint,4,opt,name=type,proto3,enum=lekko.bff.v1beta1.FeatureType" json:"type,omitempty"`
	TypeNew v1beta1.FeatureType `protobuf:"varint,5,opt,name=type_new,json=typeNew,proto3,enum=lekko.feature.v1beta1.FeatureType" json:"type_new,omitempty"`
}

func (x *AddFeatureRequest) Reset() {
	*x = AddFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeatureRequest) ProtoMessage() {}

func (x *AddFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeatureRequest.ProtoReflect.Descriptor instead.
func (*AddFeatureRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{53}
}

func (x *AddFeatureRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddFeatureRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *AddFeatureRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

// Deprecated: Do not use.
func (x *AddFeatureRequest) GetType() FeatureType {
	if x != nil {
		return x.Type
	}
	return FeatureType_FEATURE_TYPE_UNSPECIFIED
}

func (x *AddFeatureRequest) GetTypeNew() v1beta1.FeatureType {
	if x != nil {
		return x.TypeNew
	}
	return v1beta1.FeatureType(0)
}

type AddFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
	Feature           *Feature           `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *AddFeatureResponse) Reset() {
	*x = AddFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFeatureResponse) ProtoMessage() {}

func (x *AddFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFeatureResponse.ProtoReflect.Descriptor instead.
func (*AddFeatureResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{54}
}

func (x *AddFeatureResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *AddFeatureResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

func (x *AddFeatureResponse) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type RemoveFeatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamespaceName string     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string     `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
}

func (x *RemoveFeatureRequest) Reset() {
	*x = RemoveFeatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFeatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFeatureRequest) ProtoMessage() {}

func (x *RemoveFeatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFeatureRequest.ProtoReflect.Descriptor instead.
func (*RemoveFeatureRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{55}
}

func (x *RemoveFeatureRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RemoveFeatureRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *RemoveFeatureRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

type RemoveFeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
}

func (x *RemoveFeatureResponse) Reset() {
	*x = RemoveFeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFeatureResponse) ProtoMessage() {}

func (x *RemoveFeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFeatureResponse.ProtoReflect.Descriptor instead.
func (*RemoveFeatureResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{56}
}

func (x *RemoveFeatureResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *RemoveFeatureResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

type OAuthUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oauth code obtained from the provider (assuming github for now)
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The random string given to the auth provider.
	State string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *OAuthUserRequest) Reset() {
	*x = OAuthUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthUserRequest) ProtoMessage() {}

func (x *OAuthUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthUserRequest.ProtoReflect.Descriptor instead.
func (*OAuthUserRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{57}
}

func (x *OAuthUserRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OAuthUserRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type OAuthUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OAuthUserResponse) Reset() {
	*x = OAuthUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OAuthUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthUserResponse) ProtoMessage() {}

func (x *OAuthUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthUserResponse.ProtoReflect.Descriptor instead.
func (*OAuthUserResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{58}
}

type GetUserOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserOAuthRequest) Reset() {
	*x = GetUserOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOAuthRequest) ProtoMessage() {}

func (x *GetUserOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOAuthRequest.ProtoReflect.Descriptor instead.
func (*GetUserOAuthRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{59}
}

type GetUserOAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticated bool `protobuf:"varint,1,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
}

func (x *GetUserOAuthResponse) Reset() {
	*x = GetUserOAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserOAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOAuthResponse) ProtoMessage() {}

func (x *GetUserOAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOAuthResponse.ProtoReflect.Descriptor instead.
func (*GetUserOAuthResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserOAuthResponse) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

type DeleteUserOAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserOAuthRequest) Reset() {
	*x = DeleteUserOAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserOAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserOAuthRequest) ProtoMessage() {}

func (x *DeleteUserOAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserOAuthRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserOAuthRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{61}
}

type DeleteUserOAuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserOAuthResponse) Reset() {
	*x = DeleteUserOAuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserOAuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserOAuthResponse) ProtoMessage() {}

func (x *DeleteUserOAuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserOAuthResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserOAuthResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{62}
}

type AuthorizeDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserCode string `protobuf:"bytes,1,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
}

func (x *AuthorizeDeviceRequest) Reset() {
	*x = AuthorizeDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeDeviceRequest) ProtoMessage() {}

func (x *AuthorizeDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeDeviceRequest.ProtoReflect.Descriptor instead.
func (*AuthorizeDeviceRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{63}
}

func (x *AuthorizeDeviceRequest) GetUserCode() string {
	if x != nil {
		return x.UserCode
	}
	return ""
}

type AuthorizeDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuthorizeDeviceResponse) Reset() {
	*x = AuthorizeDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeDeviceResponse) ProtoMessage() {}

func (x *AuthorizeDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeDeviceResponse.ProtoReflect.Descriptor instead.
func (*AuthorizeDeviceResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{64}
}

// The result of a single github CI check run.
// There are potentially many check runs associated with
// a single git sha.
type CheckRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status      string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Conclusion  string                 `protobuf:"bytes,3,opt,name=conclusion,proto3" json:"conclusion,omitempty"`
	Url         string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	StartedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *CheckRun) Reset() {
	*x = CheckRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRun) ProtoMessage() {}

func (x *CheckRun) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRun.ProtoReflect.Descriptor instead.
func (*CheckRun) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{65}
}

func (x *CheckRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckRun) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CheckRun) GetConclusion() string {
	if x != nil {
		return x.Conclusion
	}
	return ""
}

func (x *CheckRun) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CheckRun) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *CheckRun) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

type PullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Number int64  `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	State  string `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty"`
	// Deprecated: Do not use.
	Approved bool `protobuf:"varint,5,opt,name=approved,proto3" json:"approved,omitempty"`
	// Deprecated: Do not use.
	ChecksState ChecksState `protobuf:"varint,6,opt,name=checks_state,json=checksState,proto3,enum=lekko.bff.v1beta1.ChecksState" json:"checks_state,omitempty"`
	// Deprecated: Do not use.
	PushedAt  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	Reviews   []*PullRequest_Review  `protobuf:"bytes,8,rep,name=reviews,proto3" json:"reviews,omitempty"`
	CheckRuns []*CheckRun            `protobuf:"bytes,9,rep,name=check_runs,json=checkRuns,proto3" json:"check_runs,omitempty"`
	// the git ref (e.g. my-feature) and git sha of the
	// head and base of this PR.
	HeadRef   string                `protobuf:"bytes,10,opt,name=head_ref,json=headRef,proto3" json:"head_ref,omitempty"`
	HeadSha   string                `protobuf:"bytes,11,opt,name=head_sha,json=headSha,proto3" json:"head_sha,omitempty"`
	BaseRef   string                `protobuf:"bytes,12,opt,name=base_ref,json=baseRef,proto3" json:"base_ref,omitempty"`
	BaseSha   string                `protobuf:"bytes,13,opt,name=base_sha,json=baseSha,proto3" json:"base_sha,omitempty"`
	Mergeable PullRequest_Mergeable `protobuf:"varint,14,opt,name=mergeable,proto3,enum=lekko.bff.v1beta1.PullRequest_Mergeable" json:"mergeable,omitempty"`
}

func (x *PullRequest) Reset() {
	*x = PullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest) ProtoMessage() {}

func (x *PullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest.ProtoReflect.Descriptor instead.
func (*PullRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{66}
}

func (x *PullRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PullRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PullRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *PullRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// Deprecated: Do not use.
func (x *PullRequest) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

// Deprecated: Do not use.
func (x *PullRequest) GetChecksState() ChecksState {
	if x != nil {
		return x.ChecksState
	}
	return ChecksState_CHECKS_STATE_UNSPECIFIED
}

// Deprecated: Do not use.
func (x *PullRequest) GetPushedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PushedAt
	}
	return nil
}

func (x *PullRequest) GetReviews() []*PullRequest_Review {
	if x != nil {
		return x.Reviews
	}
	return nil
}

func (x *PullRequest) GetCheckRuns() []*CheckRun {
	if x != nil {
		return x.CheckRuns
	}
	return nil
}

func (x *PullRequest) GetHeadRef() string {
	if x != nil {
		return x.HeadRef
	}
	return ""
}

func (x *PullRequest) GetHeadSha() string {
	if x != nil {
		return x.HeadSha
	}
	return ""
}

func (x *PullRequest) GetBaseRef() string {
	if x != nil {
		return x.BaseRef
	}
	return ""
}

func (x *PullRequest) GetBaseSha() string {
	if x != nil {
		return x.BaseSha
	}
	return ""
}

func (x *PullRequest) GetMergeable() PullRequest_Mergeable {
	if x != nil {
		return x.Mergeable
	}
	return PullRequest_MERGEABLE_UNSPECIFIED
}

type GetPRInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
}

func (x *GetPRInfoRequest) Reset() {
	*x = GetPRInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPRInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPRInfoRequest) ProtoMessage() {}

func (x *GetPRInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPRInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPRInfoRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{67}
}

func (x *GetPRInfoRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

type GetPRInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequests []*PullRequest `protobuf:"bytes,1,rep,name=pull_requests,json=pullRequests,proto3" json:"pull_requests,omitempty"`
}

func (x *GetPRInfoResponse) Reset() {
	*x = GetPRInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPRInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPRInfoResponse) ProtoMessage() {}

func (x *GetPRInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPRInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPRInfoResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{68}
}

func (x *GetPRInfoResponse) GetPullRequests() []*PullRequest {
	if x != nil {
		return x.PullRequests
	}
	return nil
}

type GetPRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchKey *BranchKey `protobuf:"bytes,1,opt,name=branch_key,json=branchKey,proto3" json:"branch_key,omitempty"`
}

func (x *GetPRRequest) Reset() {
	*x = GetPRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPRRequest) ProtoMessage() {}

func (x *GetPRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPRRequest.ProtoReflect.Descriptor instead.
func (*GetPRRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{69}
}

func (x *GetPRRequest) GetBranchKey() *BranchKey {
	if x != nil {
		return x.BranchKey
	}
	return nil
}

type GetPRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PullRequest *PullRequest `protobuf:"bytes,1,opt,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"`
}

func (x *GetPRResponse) Reset() {
	*x = GetPRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPRResponse) ProtoMessage() {}

func (x *GetPRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPRResponse.ProtoReflect.Descriptor instead.
func (*GetPRResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{70}
}

func (x *GetPRResponse) GetPullRequest() *PullRequest {
	if x != nil {
		return x.PullRequest
	}
	return nil
}

type MergePRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey  *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
	PrNumber int64          `protobuf:"varint,2,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
}

func (x *MergePRRequest) Reset() {
	*x = MergePRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergePRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergePRRequest) ProtoMessage() {}

func (x *MergePRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergePRRequest.ProtoReflect.Descriptor instead.
func (*MergePRRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{71}
}

func (x *MergePRRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

func (x *MergePRRequest) GetPrNumber() int64 {
	if x != nil {
		return x.PrNumber
	}
	return 0
}

type MergePRResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergePRResponse) Reset() {
	*x = MergePRResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergePRResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergePRResponse) ProtoMessage() {}

func (x *MergePRResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergePRResponse.ProtoReflect.Descriptor instead.
func (*MergePRResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{72}
}

// Branches are user-scoped git-branches
type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key         *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Sha         string     `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	// Note: pr_number is 0 if there is no PR.
	PrNumber  int64                  `protobuf:"varint,4,opt,name=pr_number,json=prNumber,proto3" json:"pr_number,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The base sha is the sha that the branch
	// was pointing to when it was created.
	BaseSha string `protobuf:"bytes,7,opt,name=base_sha,json=baseSha,proto3" json:"base_sha,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{73}
}

func (x *Branch) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Branch) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Branch) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Branch) GetPrNumber() int64 {
	if x != nil {
		return x.PrNumber
	}
	return 0
}

func (x *Branch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Branch) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Branch) GetBaseSha() string {
	if x != nil {
		return x.BaseSha
	}
	return ""
}

type BranchKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerName string `protobuf:"bytes,1,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	RepoName  string `protobuf:"bytes,2,opt,name=repo_name,json=repoName,proto3" json:"repo_name,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// random uuid to help identify a request, for
	// debugging purposes.
	Uuid string `protobuf:"bytes,4,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *BranchKey) Reset() {
	*x = BranchKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchKey) ProtoMessage() {}

func (x *BranchKey) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchKey.ProtoReflect.Descriptor instead.
func (*BranchKey) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{74}
}

func (x *BranchKey) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *BranchKey) GetRepoName() string {
	if x != nil {
		return x.RepoName
	}
	return ""
}

func (x *BranchKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchKey) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Includes sufficiently unique branch name
	// generated by the caller.
	Key *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// user-friendly description of the branch
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// commit sha to branch off from. This is what HEAD of
	// the new branch will point to.
	Sha string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{75}
}

func (x *CreateBranchRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CreateBranchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateBranchRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type CreateBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *CreateBranchResponse) Reset() {
	*x = CreateBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchResponse) ProtoMessage() {}

func (x *CreateBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchResponse.ProtoReflect.Descriptor instead.
func (*CreateBranchResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{76}
}

func (x *CreateBranchResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type ListBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{77}
}

func (x *ListBranchesRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Will always include the main branch and its sha info in the response.
	Branches []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{78}
}

func (x *ListBranchesResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BranchKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{79}
}

func (x *DeleteBranchRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeleteBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteBranchResponse) Reset() {
	*x = DeleteBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchResponse) ProtoMessage() {}

func (x *DeleteBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchResponse.ProtoReflect.Descriptor instead.
func (*DeleteBranchResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{80}
}

type SaveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string           `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string           `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	Star          []byte           `protobuf:"bytes,4,opt,name=star,proto3" json:"star,omitempty"`
	Feature       *v1beta1.Feature `protobuf:"bytes,5,opt,name=feature,proto3" json:"feature,omitempty"`
	Key           *BranchKey       `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SaveRequest) Reset() {
	*x = SaveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveRequest) ProtoMessage() {}

func (x *SaveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveRequest.ProtoReflect.Descriptor instead.
func (*SaveRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{81}
}

func (x *SaveRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *SaveRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *SaveRequest) GetStar() []byte {
	if x != nil {
		return x.Star
	}
	return nil
}

func (x *SaveRequest) GetFeature() *v1beta1.Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

func (x *SaveRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type SaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch            *Branch            `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	NamespaceContents *NamespaceContents `protobuf:"bytes,2,opt,name=namespace_contents,json=namespaceContents,proto3" json:"namespace_contents,omitempty"`
	Feature           *Feature           `protobuf:"bytes,3,opt,name=feature,proto3" json:"feature,omitempty"`
}

func (x *SaveResponse) Reset() {
	*x = SaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveResponse) ProtoMessage() {}

func (x *SaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveResponse.ProtoReflect.Descriptor instead.
func (*SaveResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{82}
}

func (x *SaveResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *SaveResponse) GetNamespaceContents() *NamespaceContents {
	if x != nil {
		return x.NamespaceContents
	}
	return nil
}

func (x *SaveResponse) GetFeature() *Feature {
	if x != nil {
		return x.Feature
	}
	return nil
}

type ConvertRuleToStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule *v1beta3.Rule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *ConvertRuleToStringRequest) Reset() {
	*x = ConvertRuleToStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertRuleToStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertRuleToStringRequest) ProtoMessage() {}

func (x *ConvertRuleToStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertRuleToStringRequest.ProtoReflect.Descriptor instead.
func (*ConvertRuleToStringRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{83}
}

func (x *ConvertRuleToStringRequest) GetRule() *v1beta3.Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type ConvertRuleToStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleString string `protobuf:"bytes,1,opt,name=rule_string,json=ruleString,proto3" json:"rule_string,omitempty"`
}

func (x *ConvertRuleToStringResponse) Reset() {
	*x = ConvertRuleToStringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertRuleToStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertRuleToStringResponse) ProtoMessage() {}

func (x *ConvertRuleToStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertRuleToStringResponse.ProtoReflect.Descriptor instead.
func (*ConvertRuleToStringResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{84}
}

func (x *ConvertRuleToStringResponse) GetRuleString() string {
	if x != nil {
		return x.RuleString
	}
	return ""
}

type ReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BranchKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ReviewRequest) Reset() {
	*x = ReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewRequest) ProtoMessage() {}

func (x *ReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewRequest.ProtoReflect.Descriptor instead.
func (*ReviewRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{85}
}

func (x *ReviewRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type ReviewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url of the pull request that has just been created
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ReviewResponse) Reset() {
	*x = ReviewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewResponse) ProtoMessage() {}

func (x *ReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewResponse.ProtoReflect.Descriptor instead.
func (*ReviewResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{86}
}

func (x *ReviewResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type MergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *BranchKey `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MergeRequest) Reset() {
	*x = MergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequest) ProtoMessage() {}

func (x *MergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequest.ProtoReflect.Descriptor instead.
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{87}
}

func (x *MergeRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type MergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MergeResponse) Reset() {
	*x = MergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeResponse) ProtoMessage() {}

func (x *MergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeResponse.ProtoReflect.Descriptor instead.
func (*MergeResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{88}
}

type EvalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceName string                     `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string                     `protobuf:"bytes,3,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	Context       map[string]*v1beta11.Value `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Key           *BranchKey                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *EvalRequest) Reset() {
	*x = EvalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalRequest) ProtoMessage() {}

func (x *EvalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalRequest.ProtoReflect.Descriptor instead.
func (*EvalRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{89}
}

func (x *EvalRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *EvalRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *EvalRequest) GetContext() map[string]*v1beta11.Value {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *EvalRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type EvalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *anypb.Any          `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Type   v1beta1.FeatureType `protobuf:"varint,2,opt,name=type,proto3,enum=lekko.feature.v1beta1.FeatureType" json:"type,omitempty"`
}

func (x *EvalResponse) Reset() {
	*x = EvalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvalResponse) ProtoMessage() {}

func (x *EvalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvalResponse.ProtoReflect.Descriptor instead.
func (*EvalResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{90}
}

func (x *EvalResponse) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *EvalResponse) GetType() v1beta1.FeatureType {
	if x != nil {
		return x.Type
	}
	return v1beta1.FeatureType(0)
}

type GetFlagEvaluationMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
	// if empty, picks the latest sha. We will find the blob
	// sha of the feature under this commit, and retrieve metrics
	// for flag evaluations against that feature sha. This ensures
	// that we obtain metrics for a feature that remains unchanged
	// across multiple commits.
	CommitSha     string `protobuf:"bytes,2,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	NamespaceName string `protobuf:"bytes,3,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	FeatureName   string `protobuf:"bytes,4,opt,name=feature_name,json=featureName,proto3" json:"feature_name,omitempty"`
	// Defaults to T-7 days
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Defaults to now
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *GetFlagEvaluationMetricsRequest) Reset() {
	*x = GetFlagEvaluationMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagEvaluationMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagEvaluationMetricsRequest) ProtoMessage() {}

func (x *GetFlagEvaluationMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagEvaluationMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetFlagEvaluationMetricsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{91}
}

func (x *GetFlagEvaluationMetricsRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

func (x *GetFlagEvaluationMetricsRequest) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *GetFlagEvaluationMetricsRequest) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *GetFlagEvaluationMetricsRequest) GetFeatureName() string {
	if x != nil {
		return x.FeatureName
	}
	return ""
}

func (x *GetFlagEvaluationMetricsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetFlagEvaluationMetricsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetFlagEvaluationMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// commit sha that was picked (same as request unless empty)
	CommitSha string                 `protobuf:"bytes,1,opt,name=commit_sha,json=commitSha,proto3" json:"commit_sha,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// total number of times the given feature was evaluated
	TotalEvaluations int64 `protobuf:"varint,4,opt,name=total_evaluations,json=totalEvaluations,proto3" json:"total_evaluations,omitempty"`
	// All the context keys that were provided, and how frequent they were
	ContextKeyCounts []*GetFlagEvaluationMetricsResponse_ContextKeyCount `protobuf:"bytes,5,rep,name=context_key_counts,json=contextKeyCounts,proto3" json:"context_key_counts,omitempty"`
	// Which paths successfully evaluated, and how frequently
	PathCounts []*GetFlagEvaluationMetricsResponse_PathCount `protobuf:"bytes,6,rep,name=path_counts,json=pathCounts,proto3" json:"path_counts,omitempty"`
	// feature sha that we queried metrics for
	FeatureSha string `protobuf:"bytes,7,opt,name=feature_sha,json=featureSha,proto3" json:"feature_sha,omitempty"`
}

func (x *GetFlagEvaluationMetricsResponse) Reset() {
	*x = GetFlagEvaluationMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagEvaluationMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagEvaluationMetricsResponse) ProtoMessage() {}

func (x *GetFlagEvaluationMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagEvaluationMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetFlagEvaluationMetricsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{92}
}

func (x *GetFlagEvaluationMetricsResponse) GetCommitSha() string {
	if x != nil {
		return x.CommitSha
	}
	return ""
}

func (x *GetFlagEvaluationMetricsResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetFlagEvaluationMetricsResponse) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetFlagEvaluationMetricsResponse) GetTotalEvaluations() int64 {
	if x != nil {
		return x.TotalEvaluations
	}
	return 0
}

func (x *GetFlagEvaluationMetricsResponse) GetContextKeyCounts() []*GetFlagEvaluationMetricsResponse_ContextKeyCount {
	if x != nil {
		return x.ContextKeyCounts
	}
	return nil
}

func (x *GetFlagEvaluationMetricsResponse) GetPathCounts() []*GetFlagEvaluationMetricsResponse_PathCount {
	if x != nil {
		return x.PathCounts
	}
	return nil
}

func (x *GetFlagEvaluationMetricsResponse) GetFeatureSha() string {
	if x != nil {
		return x.FeatureSha
	}
	return ""
}

// Restore will start a new session, with all
// data in the repo restored to the hash requested.
type RestoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchDescription string `protobuf:"bytes,2,opt,name=branch_description,json=branchDescription,proto3" json:"branch_description,omitempty"`
	// Commit hash to restore the repo to.
	CommitHash string `protobuf:"bytes,3,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	// Includes sufficiently unique branch name
	// generated by the caller.
	Key *BranchKey `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RestoreRequest) Reset() {
	*x = RestoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreRequest) ProtoMessage() {}

func (x *RestoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreRequest.ProtoReflect.Descriptor instead.
func (*RestoreRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{93}
}

func (x *RestoreRequest) GetBranchDescription() string {
	if x != nil {
		return x.BranchDescription
	}
	return ""
}

func (x *RestoreRequest) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *RestoreRequest) GetKey() *BranchKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type RestoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
}

func (x *RestoreResponse) Reset() {
	*x = RestoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreResponse) ProtoMessage() {}

func (x *RestoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreResponse.ProtoReflect.Descriptor instead.
func (*RestoreResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{94}
}

func (x *RestoreResponse) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

type GetRepositoryLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey   *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
	PageSize  int32          `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string         `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *GetRepositoryLogsRequest) Reset() {
	*x = GetRepositoryLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryLogsRequest) ProtoMessage() {}

func (x *GetRepositoryLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryLogsRequest.ProtoReflect.Descriptor instead.
func (*GetRepositoryLogsRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{95}
}

func (x *GetRepositoryLogsRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

func (x *GetRepositoryLogsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetRepositoryLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type RepositoryLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	// If we are able to identify the lekko user that authored the commit,
	// this will refer to their username. If not, we fall back to github
	// username.
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CommitMessage string                 `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
}

func (x *RepositoryLog) Reset() {
	*x = RepositoryLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryLog) ProtoMessage() {}

func (x *RepositoryLog) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryLog.ProtoReflect.Descriptor instead.
func (*RepositoryLog) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{96}
}

func (x *RepositoryLog) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *RepositoryLog) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RepositoryLog) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *RepositoryLog) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type GetRepositoryLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs          []*RepositoryLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	NextPageToken string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetRepositoryLogsResponse) Reset() {
	*x = GetRepositoryLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRepositoryLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRepositoryLogsResponse) ProtoMessage() {}

func (x *GetRepositoryLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRepositoryLogsResponse.ProtoReflect.Descriptor instead.
func (*GetRepositoryLogsResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{97}
}

func (x *GetRepositoryLogsResponse) GetLogs() []*RepositoryLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *GetRepositoryLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetRolloutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoKey *RepositoryKey `protobuf:"bytes,1,opt,name=repo_key,json=repoKey,proto3" json:"repo_key,omitempty"`
}

func (x *GetRolloutRequest) Reset() {
	*x = GetRolloutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolloutRequest) ProtoMessage() {}

func (x *GetRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolloutRequest.ProtoReflect.Descriptor instead.
func (*GetRolloutRequest) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{98}
}

func (x *GetRolloutRequest) GetRepoKey() *RepositoryKey {
	if x != nil {
		return x.RepoKey
	}
	return nil
}

type Rollout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetSha string                 `protobuf:"bytes,1,opt,name=target_sha,json=targetSha,proto3" json:"target_sha,omitempty"`
	Source    string                 `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// If we are able to identify the lekko user that authored the commit,
	// this will refer to their username. If not, we fall back to github
	// username.
	Username      string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	CommitMessage string `protobuf:"bytes,6,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
}

func (x *Rollout) Reset() {
	*x = Rollout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rollout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rollout) ProtoMessage() {}

func (x *Rollout) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rollout.ProtoReflect.Descriptor instead.
func (*Rollout) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{99}
}

func (x *Rollout) GetTargetSha() string {
	if x != nil {
		return x.TargetSha
	}
	return ""
}

func (x *Rollout) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Rollout) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Rollout) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Rollout) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Rollout) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type GetRolloutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rollout *Rollout `protobuf:"bytes,1,opt,name=rollout,proto3" json:"rollout,omitempty"`
}

func (x *GetRolloutResponse) Reset() {
	*x = GetRolloutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRolloutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolloutResponse) ProtoMessage() {}

func (x *GetRolloutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolloutResponse.ProtoReflect.Descriptor instead.
func (*GetRolloutResponse) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{100}
}

func (x *GetRolloutResponse) GetRollout() *Rollout {
	if x != nil {
		return x.Rollout
	}
	return nil
}

type ListFeaturesResponse_FeatureListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NamespaceName string                 `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName,proto3" json:"namespace_name,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// the blob sha of the proto bin file according to git
	Sha string `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *ListFeaturesResponse_FeatureListItem) Reset() {
	*x = ListFeaturesResponse_FeatureListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturesResponse_FeatureListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturesResponse_FeatureListItem) ProtoMessage() {}

func (x *ListFeaturesResponse_FeatureListItem) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturesResponse_FeatureListItem.ProtoReflect.Descriptor instead.
func (*ListFeaturesResponse_FeatureListItem) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{40, 0}
}

func (x *ListFeaturesResponse_FeatureListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListFeaturesResponse_FeatureListItem) GetNamespaceName() string {
	if x != nil {
		return x.NamespaceName
	}
	return ""
}

func (x *ListFeaturesResponse_FeatureListItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ListFeaturesResponse_FeatureListItem) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type ListRepositoryContentsResponse_FeatureListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListRepositoryContentsResponse_FeatureListItem) Reset() {
	*x = ListRepositoryContentsResponse_FeatureListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryContentsResponse_FeatureListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryContentsResponse_FeatureListItem) ProtoMessage() {}

func (x *ListRepositoryContentsResponse_FeatureListItem) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryContentsResponse_FeatureListItem.ProtoReflect.Descriptor instead.
func (*ListRepositoryContentsResponse_FeatureListItem) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ListRepositoryContentsResponse_FeatureListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRepositoryContentsResponse_NamespaceListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version of the namespace in lekko, e.g. 'v1beta3'
	Version  string                                            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Features []*ListRepositoryContentsResponse_FeatureListItem `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *ListRepositoryContentsResponse_NamespaceListItem) Reset() {
	*x = ListRepositoryContentsResponse_NamespaceListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRepositoryContentsResponse_NamespaceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRepositoryContentsResponse_NamespaceListItem) ProtoMessage() {}

func (x *ListRepositoryContentsResponse_NamespaceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRepositoryContentsResponse_NamespaceListItem.ProtoReflect.Descriptor instead.
func (*ListRepositoryContentsResponse_NamespaceListItem) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{42, 1}
}

func (x *ListRepositoryContentsResponse_NamespaceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRepositoryContentsResponse_NamespaceListItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ListRepositoryContentsResponse_NamespaceListItem) GetFeatures() []*ListRepositoryContentsResponse_FeatureListItem {
	if x != nil {
		return x.Features
	}
	return nil
}

type NamespaceContents_FeatureListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NamespaceContents_FeatureListItem) Reset() {
	*x = NamespaceContents_FeatureListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceContents_FeatureListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceContents_FeatureListItem) ProtoMessage() {}

func (x *NamespaceContents_FeatureListItem) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceContents_FeatureListItem.ProtoReflect.Descriptor instead.
func (*NamespaceContents_FeatureListItem) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{43, 0}
}

func (x *NamespaceContents_FeatureListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NamespaceContents_NamespaceListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version of the namespace in lekko, e.g. 'v1beta3'
	Version  string                               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Features []*NamespaceContents_FeatureListItem `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *NamespaceContents_NamespaceListItem) Reset() {
	*x = NamespaceContents_NamespaceListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceContents_NamespaceListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceContents_NamespaceListItem) ProtoMessage() {}

func (x *NamespaceContents_NamespaceListItem) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceContents_NamespaceListItem.ProtoReflect.Descriptor instead.
func (*NamespaceContents_NamespaceListItem) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{43, 1}
}

func (x *NamespaceContents_NamespaceListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceContents_NamespaceListItem) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NamespaceContents_NamespaceListItem) GetFeatures() []*NamespaceContents_FeatureListItem {
	if x != nil {
		return x.Features
	}
	return nil
}

type PullRequest_Review struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user who performed the review
	User        string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	SubmittedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	State       string                 `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// review author's association with the repo.
	// https://docs.github.com/en/graphql/reference/enums#commentauthorassociation
	AuthorAssociation string `protobuf:"bytes,4,opt,name=author_association,json=authorAssociation,proto3" json:"author_association,omitempty"`
}

func (x *PullRequest_Review) Reset() {
	*x = PullRequest_Review{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullRequest_Review) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullRequest_Review) ProtoMessage() {}

func (x *PullRequest_Review) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullRequest_Review.ProtoReflect.Descriptor instead.
func (*PullRequest_Review) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{66, 0}
}

func (x *PullRequest_Review) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *PullRequest_Review) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *PullRequest_Review) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PullRequest_Review) GetAuthorAssociation() string {
	if x != nil {
		return x.AuthorAssociation
	}
	return ""
}

type GetFlagEvaluationMetricsResponse_ContextKeyCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) Reset() {
	*x = GetFlagEvaluationMetricsResponse_ContextKeyCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagEvaluationMetricsResponse_ContextKeyCount) ProtoMessage() {}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagEvaluationMetricsResponse_ContextKeyCount.ProtoReflect.Descriptor instead.
func (*GetFlagEvaluationMetricsResponse_ContextKeyCount) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{92, 0}
}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetFlagEvaluationMetricsResponse_ContextKeyCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetFlagEvaluationMetricsResponse_PathCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  []int64 `protobuf:"varint,1,rep,packed,name=path,proto3" json:"path,omitempty"`
	Count int64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetFlagEvaluationMetricsResponse_PathCount) Reset() {
	*x = GetFlagEvaluationMetricsResponse_PathCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFlagEvaluationMetricsResponse_PathCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlagEvaluationMetricsResponse_PathCount) ProtoMessage() {}

func (x *GetFlagEvaluationMetricsResponse_PathCount) ProtoReflect() protoreflect.Message {
	mi := &file_lekko_bff_v1beta1_bff_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlagEvaluationMetricsResponse_PathCount.ProtoReflect.Descriptor instead.
func (*GetFlagEvaluationMetricsResponse_PathCount) Descriptor() ([]byte, []int) {
	return file_lekko_bff_v1beta1_bff_proto_rawDescGZIP(), []int{92, 1}
}

func (x *GetFlagEvaluationMetricsResponse_PathCount) GetPath() []int64 {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetFlagEvaluationMetricsResponse_PathCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_lekko_bff_v1beta1_bff_proto protoreflect.FileDescriptor

var file_lekko_bff_v1beta1_bff_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x62, 0x66, 0x66, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x62, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x16, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x9b, 0x01, 0x0a,
	0x06, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4b, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x50,
	0x49, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x31, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x42, 0x0a, 0x13, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x27, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c,
	0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x1c, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0x6c, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x22, 0x35, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x80, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x5d, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65,
	0x79, 0x22, 0x56, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x74, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x79, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f,
	0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x22, 0x4f, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x82, 0x03, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x1a, 0x25, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa8, 0x02, 0x0a, 0x11, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x56, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x25, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x93, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x8d, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0xc5, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x45,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x6c, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x65, 0x77, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x12,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x3c, 0x0a, 0x10,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x16, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x08,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xc3, 0x06, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x09, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x53, 0x68, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x68, 0x61, 0x12, 0x46, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xa0, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66,
	0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x22, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x52, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x52,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x4b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x52,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x6a, 0x0a, 0x0e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x52, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x11,
	0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9a, 0x02, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68, 0x61, 0x22, 0x6f,
	0x0a, 0x09, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22,
	0x79, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x49, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x52, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x4b, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0x3e, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x45, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x22, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x0c,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x0b, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x1a, 0x58, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x0c, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xda, 0x04, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x71, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x0b,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x1a, 0x4d, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x35, 0x0a, 0x09,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x4a, 0x0a, 0x0f,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b,
	0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa1,
	0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x68, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x79, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x50, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x4b, 0x65, 0x79, 0x22,
	0xf9, 0x01, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x68, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x07,
	0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x2a, 0x68, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10,
	0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x06, 0x2a, 0x7b, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xfa, 0x22, 0x0a, 0x0a, 0x42, 0x46,
	0x46, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x49, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67,
	0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x25, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x50, 0x49, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12,
	0x21, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12,
	0x2d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x76, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2a, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2a, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12,
	0x64, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x7f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x30, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x6b,
	0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x64,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a,
	0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x53, 0x61, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66,
	0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x52, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x52, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x52, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x12, 0x4c, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x50, 0x52, 0x12, 0x1f, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x07, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x52, 0x12, 0x21, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x52, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x26, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x26,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62,
	0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6c, 0x65,
	0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f,
	0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x21,
	0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e,
	0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xce, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6c,
	0x65, 0x6b, 0x6b, 0x6f, 0x2e, 0x62, 0x66, 0x66, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x42, 0x08, 0x42, 0x66, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x64, 0x65,
	0x76, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x6c, 0x65, 0x6b, 0x6b, 0x6f, 0x2f, 0x62, 0x66, 0x66,
	0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x62, 0x66, 0x66, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4c, 0x42, 0x58, 0xaa, 0x02, 0x11, 0x4c, 0x65, 0x6b, 0x6b,
	0x6f, 0x2e, 0x42, 0x66, 0x66, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x11,
	0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x5c, 0x42, 0x66, 0x66, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0xe2, 0x02, 0x1d, 0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x5c, 0x42, 0x66, 0x66, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x13, 0x4c, 0x65, 0x6b, 0x6b, 0x6f, 0x3a, 0x3a, 0x42, 0x66, 0x66, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lekko_bff_v1beta1_bff_proto_rawDescOnce sync.Once
	file_lekko_bff_v1beta1_bff_proto_rawDescData = file_lekko_bff_v1beta1_bff_proto_rawDesc
)

func file_lekko_bff_v1beta1_bff_proto_rawDescGZIP() []byte {
	file_lekko_bff_v1beta1_bff_proto_rawDescOnce.Do(func() {
		file_lekko_bff_v1beta1_bff_proto_rawDescData = protoimpl.X.CompressGZIP(file_lekko_bff_v1beta1_bff_proto_rawDescData)
	})
	return file_lekko_bff_v1beta1_bff_proto_rawDescData
}

var file_lekko_bff_v1beta1_bff_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_lekko_bff_v1beta1_bff_proto_msgTypes = make([]protoimpl.MessageInfo, 110)
var file_lekko_bff_v1beta1_bff_proto_goTypes = []interface{}{
	(MembershipRole)(0),                                      // 0: lekko.bff.v1beta1.MembershipRole
	(FeatureType)(0),                                         // 1: lekko.bff.v1beta1.FeatureType
	(ChecksState)(0),                                         // 2: lekko.bff.v1beta1.ChecksState
	(PullRequest_Mergeable)(0),                               // 3: lekko.bff.v1beta1.PullRequest.Mergeable
	(*GetUserLoggedInInfoRequest)(nil),                       // 4: lekko.bff.v1beta1.GetUserLoggedInInfoRequest
	(*GetUserLoggedInInfoResponse)(nil),                      // 5: lekko.bff.v1beta1.GetUserLoggedInInfoResponse
	(*ChangePasswordRequest)(nil),                            // 6: lekko.bff.v1beta1.ChangePasswordRequest
	(*ChangePasswordResponse)(nil),                           // 7: lekko.bff.v1beta1.ChangePasswordResponse
	(*GenerateAPIKeyRequest)(nil),                            // 8: lekko.bff.v1beta1.GenerateAPIKeyRequest
	(*GenerateAPIKeyResponse)(nil),                           // 9: lekko.bff.v1beta1.GenerateAPIKeyResponse
	(*APIKey)(nil),                                           // 10: lekko.bff.v1beta1.APIKey
	(*ListAPIKeysRequest)(nil),                               // 11: lekko.bff.v1beta1.ListAPIKeysRequest
	(*ListAPIKeysResponse)(nil),                              // 12: lekko.bff.v1beta1.ListAPIKeysResponse
	(*DeleteAPIKeyRequest)(nil),                              // 13: lekko.bff.v1beta1.DeleteAPIKeyRequest
	(*DeleteAPIKeyResponse)(nil),                             // 14: lekko.bff.v1beta1.DeleteAPIKeyResponse
	(*CheckAPIKeyRequest)(nil),                               // 15: lekko.bff.v1beta1.CheckAPIKeyRequest
	(*CheckAPIKeyResponse)(nil),                              // 16: lekko.bff.v1beta1.CheckAPIKeyResponse
	(*CreateTeamRequest)(nil),                                // 17: lekko.bff.v1beta1.CreateTeamRequest
	(*CreateTeamResponse)(nil),                               // 18: lekko.bff.v1beta1.CreateTeamResponse
	(*DeleteTeamRequest)(nil),                                // 19: lekko.bff.v1beta1.DeleteTeamRequest
	(*DeleteTeamResponse)(nil),                               // 20: lekko.bff.v1beta1.DeleteTeamResponse
	(*UseTeamRequest)(nil),                                   // 21: lekko.bff.v1beta1.UseTeamRequest
	(*UseTeamResponse)(nil),                                  // 22: lekko.bff.v1beta1.UseTeamResponse
	(*Membership)(nil),                                       // 23: lekko.bff.v1beta1.Membership
	(*ListTeamMembershipsRequest)(nil),                       // 24: lekko.bff.v1beta1.ListTeamMembershipsRequest
	(*ListTeamMembershipsResponse)(nil),                      // 25: lekko.bff.v1beta1.ListTeamMembershipsResponse
	(*ListUserMembershipsRequest)(nil),                       // 26: lekko.bff.v1beta1.ListUserMembershipsRequest
	(*ListUserMembershipsResponse)(nil),                      // 27: lekko.bff.v1beta1.ListUserMembershipsResponse
	(*UpsertMembershipRequest)(nil),                          // 28: lekko.bff.v1beta1.UpsertMembershipRequest
	(*UpsertMembershipResponse)(nil),                         // 29: lekko.bff.v1beta1.UpsertMembershipResponse
	(*RemoveMembershipRequest)(nil),                          // 30: lekko.bff.v1beta1.RemoveMembershipRequest
	(*RemoveMembershipResponse)(nil),                         // 31: lekko.bff.v1beta1.RemoveMembershipResponse
	(*RepositoryKey)(nil),                                    // 32: lekko.bff.v1beta1.RepositoryKey
	(*CreateRepositoryRequest)(nil),                          // 33: lekko.bff.v1beta1.CreateRepositoryRequest
	(*CreateRepositoryResponse)(nil),                         // 34: lekko.bff.v1beta1.CreateRepositoryResponse
	(*DeleteRepositoryRequest)(nil),                          // 35: lekko.bff.v1beta1.DeleteRepositoryRequest
	(*DeleteRepositoryResponse)(nil),                         // 36: lekko.bff.v1beta1.DeleteRepositoryResponse
	(*ListRepositoriesRequest)(nil),                          // 37: lekko.bff.v1beta1.ListRepositoriesRequest
	(*Repository)(nil),                                       // 38: lekko.bff.v1beta1.Repository
	(*ListRepositoriesResponse)(nil),                         // 39: lekko.bff.v1beta1.ListRepositoriesResponse
	(*ListNamespacesRequest)(nil),                            // 40: lekko.bff.v1beta1.ListNamespacesRequest
	(*ListNamespacesResponse)(nil),                           // 41: lekko.bff.v1beta1.ListNamespacesResponse
	(*Namespace)(nil),                                        // 42: lekko.bff.v1beta1.Namespace
	(*ListFeaturesRequest)(nil),                              // 43: lekko.bff.v1beta1.ListFeaturesRequest
	(*ListFeaturesResponse)(nil),                             // 44: lekko.bff.v1beta1.ListFeaturesResponse
	(*ListRepositoryContentsRequest)(nil),                    // 45: lekko.bff.v1beta1.ListRepositoryContentsRequest
	(*ListRepositoryContentsResponse)(nil),                   // 46: lekko.bff.v1beta1.ListRepositoryContentsResponse
	(*NamespaceContents)(nil),                                // 47: lekko.bff.v1beta1.NamespaceContents
	(*GetRepositoryContentsRequest)(nil),                     // 48: lekko.bff.v1beta1.GetRepositoryContentsRequest
	(*GetRepositoryContentsResponse)(nil),                    // 49: lekko.bff.v1beta1.GetRepositoryContentsResponse
	(*GetFeatureRequest)(nil),                                // 50: lekko.bff.v1beta1.GetFeatureRequest
	(*GetFeatureResponse)(nil),                               // 51: lekko.bff.v1beta1.GetFeatureResponse
	(*Feature)(nil),                                          // 52: lekko.bff.v1beta1.Feature
	(*AddNamespaceRequest)(nil),                              // 53: lekko.bff.v1beta1.AddNamespaceRequest
	(*AddNamespaceResponse)(nil),                             // 54: lekko.bff.v1beta1.AddNamespaceResponse
	(*RemoveNamespaceRequest)(nil),                           // 55: lekko.bff.v1beta1.RemoveNamespaceRequest
	(*RemoveNamespaceResponse)(nil),                          // 56: lekko.bff.v1beta1.RemoveNamespaceResponse
	(*AddFeatureRequest)(nil),                                // 57: lekko.bff.v1beta1.AddFeatureRequest
	(*AddFeatureResponse)(nil),                               // 58: lekko.bff.v1beta1.AddFeatureResponse
	(*RemoveFeatureRequest)(nil),                             // 59: lekko.bff.v1beta1.RemoveFeatureRequest
	(*RemoveFeatureResponse)(nil),                            // 60: lekko.bff.v1beta1.RemoveFeatureResponse
	(*OAuthUserRequest)(nil),                                 // 61: lekko.bff.v1beta1.OAuthUserRequest
	(*OAuthUserResponse)(nil),                                // 62: lekko.bff.v1beta1.OAuthUserResponse
	(*GetUserOAuthRequest)(nil),                              // 63: lekko.bff.v1beta1.GetUserOAuthRequest
	(*GetUserOAuthResponse)(nil),                             // 64: lekko.bff.v1beta1.GetUserOAuthResponse
	(*DeleteUserOAuthRequest)(nil),                           // 65: lekko.bff.v1beta1.DeleteUserOAuthRequest
	(*DeleteUserOAuthResponse)(nil),                          // 66: lekko.bff.v1beta1.DeleteUserOAuthResponse
	(*AuthorizeDeviceRequest)(nil),                           // 67: lekko.bff.v1beta1.AuthorizeDeviceRequest
	(*AuthorizeDeviceResponse)(nil),                          // 68: lekko.bff.v1beta1.AuthorizeDeviceResponse
	(*CheckRun)(nil),                                         // 69: lekko.bff.v1beta1.CheckRun
	(*PullRequest)(nil),                                      // 70: lekko.bff.v1beta1.PullRequest
	(*GetPRInfoRequest)(nil),                                 // 71: lekko.bff.v1beta1.GetPRInfoRequest
	(*GetPRInfoResponse)(nil),                                // 72: lekko.bff.v1beta1.GetPRInfoResponse
	(*GetPRRequest)(nil),                                     // 73: lekko.bff.v1beta1.GetPRRequest
	(*GetPRResponse)(nil),                                    // 74: lekko.bff.v1beta1.GetPRResponse
	(*MergePRRequest)(nil),                                   // 75: lekko.bff.v1beta1.MergePRRequest
	(*MergePRResponse)(nil),                                  // 76: lekko.bff.v1beta1.MergePRResponse
	(*Branch)(nil),                                           // 77: lekko.bff.v1beta1.Branch
	(*BranchKey)(nil),                                        // 78: lekko.bff.v1beta1.BranchKey
	(*CreateBranchRequest)(nil),                              // 79: lekko.bff.v1beta1.CreateBranchRequest
	(*CreateBranchResponse)(nil),                             // 80: lekko.bff.v1beta1.CreateBranchResponse
	(*ListBranchesRequest)(nil),                              // 81: lekko.bff.v1beta1.ListBranchesRequest
	(*ListBranchesResponse)(nil),                             // 82: lekko.bff.v1beta1.ListBranchesResponse
	(*DeleteBranchRequest)(nil),                              // 83: lekko.bff.v1beta1.DeleteBranchRequest
	(*DeleteBranchResponse)(nil),                             // 84: lekko.bff.v1beta1.DeleteBranchResponse
	(*SaveRequest)(nil),                                      // 85: lekko.bff.v1beta1.SaveRequest
	(*SaveResponse)(nil),                                     // 86: lekko.bff.v1beta1.SaveResponse
	(*ConvertRuleToStringRequest)(nil),                       // 87: lekko.bff.v1beta1.ConvertRuleToStringRequest
	(*ConvertRuleToStringResponse)(nil),                      // 88: lekko.bff.v1beta1.ConvertRuleToStringResponse
	(*ReviewRequest)(nil),                                    // 89: lekko.bff.v1beta1.ReviewRequest
	(*ReviewResponse)(nil),                                   // 90: lekko.bff.v1beta1.ReviewResponse
	(*MergeRequest)(nil),                                     // 91: lekko.bff.v1beta1.MergeRequest
	(*MergeResponse)(nil),                                    // 92: lekko.bff.v1beta1.MergeResponse
	(*EvalRequest)(nil),                                      // 93: lekko.bff.v1beta1.EvalRequest
	(*EvalResponse)(nil),                                     // 94: lekko.bff.v1beta1.EvalResponse
	(*GetFlagEvaluationMetricsRequest)(nil),                  // 95: lekko.bff.v1beta1.GetFlagEvaluationMetricsRequest
	(*GetFlagEvaluationMetricsResponse)(nil),                 // 96: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse
	(*RestoreRequest)(nil),                                   // 97: lekko.bff.v1beta1.RestoreRequest
	(*RestoreResponse)(nil),                                  // 98: lekko.bff.v1beta1.RestoreResponse
	(*GetRepositoryLogsRequest)(nil),                         // 99: lekko.bff.v1beta1.GetRepositoryLogsRequest
	(*RepositoryLog)(nil),                                    // 100: lekko.bff.v1beta1.RepositoryLog
	(*GetRepositoryLogsResponse)(nil),                        // 101: lekko.bff.v1beta1.GetRepositoryLogsResponse
	(*GetRolloutRequest)(nil),                                // 102: lekko.bff.v1beta1.GetRolloutRequest
	(*Rollout)(nil),                                          // 103: lekko.bff.v1beta1.Rollout
	(*GetRolloutResponse)(nil),                               // 104: lekko.bff.v1beta1.GetRolloutResponse
	(*ListFeaturesResponse_FeatureListItem)(nil),             // 105: lekko.bff.v1beta1.ListFeaturesResponse.FeatureListItem
	(*ListRepositoryContentsResponse_FeatureListItem)(nil),   // 106: lekko.bff.v1beta1.ListRepositoryContentsResponse.FeatureListItem
	(*ListRepositoryContentsResponse_NamespaceListItem)(nil), // 107: lekko.bff.v1beta1.ListRepositoryContentsResponse.NamespaceListItem
	(*NamespaceContents_FeatureListItem)(nil),                // 108: lekko.bff.v1beta1.NamespaceContents.FeatureListItem
	(*NamespaceContents_NamespaceListItem)(nil),              // 109: lekko.bff.v1beta1.NamespaceContents.NamespaceListItem
	(*PullRequest_Review)(nil),                               // 110: lekko.bff.v1beta1.PullRequest.Review
	nil,                                                      // 111: lekko.bff.v1beta1.EvalRequest.ContextEntry
	(*GetFlagEvaluationMetricsResponse_ContextKeyCount)(nil), // 112: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.ContextKeyCount
	(*GetFlagEvaluationMetricsResponse_PathCount)(nil),       // 113: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.PathCount
	(*timestamppb.Timestamp)(nil),                            // 114: google.protobuf.Timestamp
	(*v1beta1.Feature)(nil),                                  // 115: lekko.feature.v1beta1.Feature
	(v1beta1.FeatureType)(0),                                 // 116: lekko.feature.v1beta1.FeatureType
	(*v1beta3.Rule)(nil),                                     // 117: lekko.rules.v1beta3.Rule
	(*anypb.Any)(nil),                                        // 118: google.protobuf.Any
	(*v1beta11.Value)(nil),                                   // 119: lekko.backend.v1beta1.Value
}
var file_lekko_bff_v1beta1_bff_proto_depIdxs = []int32{
	114, // 0: lekko.bff.v1beta1.APIKey.created_at:type_name -> google.protobuf.Timestamp
	10,  // 1: lekko.bff.v1beta1.ListAPIKeysResponse.api_keys:type_name -> lekko.bff.v1beta1.APIKey
	10,  // 2: lekko.bff.v1beta1.CheckAPIKeyResponse.key:type_name -> lekko.bff.v1beta1.APIKey
	0,   // 3: lekko.bff.v1beta1.Membership.role:type_name -> lekko.bff.v1beta1.MembershipRole
	23,  // 4: lekko.bff.v1beta1.ListTeamMembershipsResponse.memberships:type_name -> lekko.bff.v1beta1.Membership
	23,  // 5: lekko.bff.v1beta1.ListUserMembershipsResponse.memberships:type_name -> lekko.bff.v1beta1.Membership
	0,   // 6: lekko.bff.v1beta1.UpsertMembershipRequest.role:type_name -> lekko.bff.v1beta1.MembershipRole
	23,  // 7: lekko.bff.v1beta1.UpsertMembershipResponse.membership:type_name -> lekko.bff.v1beta1.Membership
	32,  // 8: lekko.bff.v1beta1.CreateRepositoryRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	32,  // 9: lekko.bff.v1beta1.DeleteRepositoryRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	114, // 10: lekko.bff.v1beta1.Repository.created_at:type_name -> google.protobuf.Timestamp
	114, // 11: lekko.bff.v1beta1.Repository.updated_at:type_name -> google.protobuf.Timestamp
	38,  // 12: lekko.bff.v1beta1.ListRepositoriesResponse.repositories:type_name -> lekko.bff.v1beta1.Repository
	32,  // 13: lekko.bff.v1beta1.ListNamespacesRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	42,  // 14: lekko.bff.v1beta1.ListNamespacesResponse.namespaces:type_name -> lekko.bff.v1beta1.Namespace
	114, // 15: lekko.bff.v1beta1.Namespace.updated_at:type_name -> google.protobuf.Timestamp
	32,  // 16: lekko.bff.v1beta1.ListFeaturesRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	105, // 17: lekko.bff.v1beta1.ListFeaturesResponse.features:type_name -> lekko.bff.v1beta1.ListFeaturesResponse.FeatureListItem
	78,  // 18: lekko.bff.v1beta1.ListRepositoryContentsRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	107, // 19: lekko.bff.v1beta1.ListRepositoryContentsResponse.namespaces:type_name -> lekko.bff.v1beta1.ListRepositoryContentsResponse.NamespaceListItem
	77,  // 20: lekko.bff.v1beta1.ListRepositoryContentsResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	109, // 21: lekko.bff.v1beta1.NamespaceContents.namespaces:type_name -> lekko.bff.v1beta1.NamespaceContents.NamespaceListItem
	78,  // 22: lekko.bff.v1beta1.GetRepositoryContentsRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 23: lekko.bff.v1beta1.GetRepositoryContentsResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 24: lekko.bff.v1beta1.GetRepositoryContentsResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	52,  // 25: lekko.bff.v1beta1.GetRepositoryContentsResponse.feature:type_name -> lekko.bff.v1beta1.Feature
	78,  // 26: lekko.bff.v1beta1.GetFeatureRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	52,  // 27: lekko.bff.v1beta1.GetFeatureResponse.feature:type_name -> lekko.bff.v1beta1.Feature
	77,  // 28: lekko.bff.v1beta1.GetFeatureResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	115, // 29: lekko.bff.v1beta1.Feature.static_feature:type_name -> lekko.feature.v1beta1.Feature
	78,  // 30: lekko.bff.v1beta1.AddNamespaceRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 31: lekko.bff.v1beta1.AddNamespaceResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 32: lekko.bff.v1beta1.AddNamespaceResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	78,  // 33: lekko.bff.v1beta1.RemoveNamespaceRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 34: lekko.bff.v1beta1.RemoveNamespaceResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 35: lekko.bff.v1beta1.RemoveNamespaceResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	78,  // 36: lekko.bff.v1beta1.AddFeatureRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	1,   // 37: lekko.bff.v1beta1.AddFeatureRequest.type:type_name -> lekko.bff.v1beta1.FeatureType
	116, // 38: lekko.bff.v1beta1.AddFeatureRequest.type_new:type_name -> lekko.feature.v1beta1.FeatureType
	77,  // 39: lekko.bff.v1beta1.AddFeatureResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 40: lekko.bff.v1beta1.AddFeatureResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	52,  // 41: lekko.bff.v1beta1.AddFeatureResponse.feature:type_name -> lekko.bff.v1beta1.Feature
	78,  // 42: lekko.bff.v1beta1.RemoveFeatureRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 43: lekko.bff.v1beta1.RemoveFeatureResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 44: lekko.bff.v1beta1.RemoveFeatureResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	114, // 45: lekko.bff.v1beta1.CheckRun.started_at:type_name -> google.protobuf.Timestamp
	114, // 46: lekko.bff.v1beta1.CheckRun.completed_at:type_name -> google.protobuf.Timestamp
	2,   // 47: lekko.bff.v1beta1.PullRequest.checks_state:type_name -> lekko.bff.v1beta1.ChecksState
	114, // 48: lekko.bff.v1beta1.PullRequest.pushed_at:type_name -> google.protobuf.Timestamp
	110, // 49: lekko.bff.v1beta1.PullRequest.reviews:type_name -> lekko.bff.v1beta1.PullRequest.Review
	69,  // 50: lekko.bff.v1beta1.PullRequest.check_runs:type_name -> lekko.bff.v1beta1.CheckRun
	3,   // 51: lekko.bff.v1beta1.PullRequest.mergeable:type_name -> lekko.bff.v1beta1.PullRequest.Mergeable
	32,  // 52: lekko.bff.v1beta1.GetPRInfoRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	70,  // 53: lekko.bff.v1beta1.GetPRInfoResponse.pull_requests:type_name -> lekko.bff.v1beta1.PullRequest
	78,  // 54: lekko.bff.v1beta1.GetPRRequest.branch_key:type_name -> lekko.bff.v1beta1.BranchKey
	70,  // 55: lekko.bff.v1beta1.GetPRResponse.pull_request:type_name -> lekko.bff.v1beta1.PullRequest
	32,  // 56: lekko.bff.v1beta1.MergePRRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	78,  // 57: lekko.bff.v1beta1.Branch.key:type_name -> lekko.bff.v1beta1.BranchKey
	114, // 58: lekko.bff.v1beta1.Branch.created_at:type_name -> google.protobuf.Timestamp
	114, // 59: lekko.bff.v1beta1.Branch.updated_at:type_name -> google.protobuf.Timestamp
	78,  // 60: lekko.bff.v1beta1.CreateBranchRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 61: lekko.bff.v1beta1.CreateBranchResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	32,  // 62: lekko.bff.v1beta1.ListBranchesRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	77,  // 63: lekko.bff.v1beta1.ListBranchesResponse.branches:type_name -> lekko.bff.v1beta1.Branch
	78,  // 64: lekko.bff.v1beta1.DeleteBranchRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	115, // 65: lekko.bff.v1beta1.SaveRequest.feature:type_name -> lekko.feature.v1beta1.Feature
	78,  // 66: lekko.bff.v1beta1.SaveRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 67: lekko.bff.v1beta1.SaveResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	47,  // 68: lekko.bff.v1beta1.SaveResponse.namespace_contents:type_name -> lekko.bff.v1beta1.NamespaceContents
	52,  // 69: lekko.bff.v1beta1.SaveResponse.feature:type_name -> lekko.bff.v1beta1.Feature
	117, // 70: lekko.bff.v1beta1.ConvertRuleToStringRequest.rule:type_name -> lekko.rules.v1beta3.Rule
	78,  // 71: lekko.bff.v1beta1.ReviewRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	78,  // 72: lekko.bff.v1beta1.MergeRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	111, // 73: lekko.bff.v1beta1.EvalRequest.context:type_name -> lekko.bff.v1beta1.EvalRequest.ContextEntry
	78,  // 74: lekko.bff.v1beta1.EvalRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	118, // 75: lekko.bff.v1beta1.EvalResponse.result:type_name -> google.protobuf.Any
	116, // 76: lekko.bff.v1beta1.EvalResponse.type:type_name -> lekko.feature.v1beta1.FeatureType
	32,  // 77: lekko.bff.v1beta1.GetFlagEvaluationMetricsRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	114, // 78: lekko.bff.v1beta1.GetFlagEvaluationMetricsRequest.start_time:type_name -> google.protobuf.Timestamp
	114, // 79: lekko.bff.v1beta1.GetFlagEvaluationMetricsRequest.end_time:type_name -> google.protobuf.Timestamp
	114, // 80: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.start_time:type_name -> google.protobuf.Timestamp
	114, // 81: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.end_time:type_name -> google.protobuf.Timestamp
	112, // 82: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.context_key_counts:type_name -> lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.ContextKeyCount
	113, // 83: lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.path_counts:type_name -> lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse.PathCount
	78,  // 84: lekko.bff.v1beta1.RestoreRequest.key:type_name -> lekko.bff.v1beta1.BranchKey
	77,  // 85: lekko.bff.v1beta1.RestoreResponse.branch:type_name -> lekko.bff.v1beta1.Branch
	32,  // 86: lekko.bff.v1beta1.GetRepositoryLogsRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	114, // 87: lekko.bff.v1beta1.RepositoryLog.create_time:type_name -> google.protobuf.Timestamp
	100, // 88: lekko.bff.v1beta1.GetRepositoryLogsResponse.logs:type_name -> lekko.bff.v1beta1.RepositoryLog
	32,  // 89: lekko.bff.v1beta1.GetRolloutRequest.repo_key:type_name -> lekko.bff.v1beta1.RepositoryKey
	114, // 90: lekko.bff.v1beta1.Rollout.created_at:type_name -> google.protobuf.Timestamp
	114, // 91: lekko.bff.v1beta1.Rollout.updated_at:type_name -> google.protobuf.Timestamp
	103, // 92: lekko.bff.v1beta1.GetRolloutResponse.rollout:type_name -> lekko.bff.v1beta1.Rollout
	114, // 93: lekko.bff.v1beta1.ListFeaturesResponse.FeatureListItem.updated_at:type_name -> google.protobuf.Timestamp
	106, // 94: lekko.bff.v1beta1.ListRepositoryContentsResponse.NamespaceListItem.features:type_name -> lekko.bff.v1beta1.ListRepositoryContentsResponse.FeatureListItem
	108, // 95: lekko.bff.v1beta1.NamespaceContents.NamespaceListItem.features:type_name -> lekko.bff.v1beta1.NamespaceContents.FeatureListItem
	114, // 96: lekko.bff.v1beta1.PullRequest.Review.submitted_at:type_name -> google.protobuf.Timestamp
	119, // 97: lekko.bff.v1beta1.EvalRequest.ContextEntry.value:type_name -> lekko.backend.v1beta1.Value
	4,   // 98: lekko.bff.v1beta1.BFFService.GetUserLoggedInInfo:input_type -> lekko.bff.v1beta1.GetUserLoggedInInfoRequest
	6,   // 99: lekko.bff.v1beta1.BFFService.ChangePassword:input_type -> lekko.bff.v1beta1.ChangePasswordRequest
	61,  // 100: lekko.bff.v1beta1.BFFService.OAuthUser:input_type -> lekko.bff.v1beta1.OAuthUserRequest
	63,  // 101: lekko.bff.v1beta1.BFFService.GetUserOAuth:input_type -> lekko.bff.v1beta1.GetUserOAuthRequest
	65,  // 102: lekko.bff.v1beta1.BFFService.DeleteUserOAuth:input_type -> lekko.bff.v1beta1.DeleteUserOAuthRequest
	67,  // 103: lekko.bff.v1beta1.BFFService.AuthorizeDevice:input_type -> lekko.bff.v1beta1.AuthorizeDeviceRequest
	8,   // 104: lekko.bff.v1beta1.BFFService.GenerateAPIKey:input_type -> lekko.bff.v1beta1.GenerateAPIKeyRequest
	11,  // 105: lekko.bff.v1beta1.BFFService.ListAPIKeys:input_type -> lekko.bff.v1beta1.ListAPIKeysRequest
	13,  // 106: lekko.bff.v1beta1.BFFService.DeleteAPIKey:input_type -> lekko.bff.v1beta1.DeleteAPIKeyRequest
	15,  // 107: lekko.bff.v1beta1.BFFService.CheckAPIKey:input_type -> lekko.bff.v1beta1.CheckAPIKeyRequest
	17,  // 108: lekko.bff.v1beta1.BFFService.CreateTeam:input_type -> lekko.bff.v1beta1.CreateTeamRequest
	19,  // 109: lekko.bff.v1beta1.BFFService.DeleteTeam:input_type -> lekko.bff.v1beta1.DeleteTeamRequest
	21,  // 110: lekko.bff.v1beta1.BFFService.UseTeam:input_type -> lekko.bff.v1beta1.UseTeamRequest
	24,  // 111: lekko.bff.v1beta1.BFFService.ListTeamMemberships:input_type -> lekko.bff.v1beta1.ListTeamMembershipsRequest
	26,  // 112: lekko.bff.v1beta1.BFFService.ListUserMemberships:input_type -> lekko.bff.v1beta1.ListUserMembershipsRequest
	28,  // 113: lekko.bff.v1beta1.BFFService.UpsertMembership:input_type -> lekko.bff.v1beta1.UpsertMembershipRequest
	30,  // 114: lekko.bff.v1beta1.BFFService.RemoveMembership:input_type -> lekko.bff.v1beta1.RemoveMembershipRequest
	33,  // 115: lekko.bff.v1beta1.BFFService.CreateRepository:input_type -> lekko.bff.v1beta1.CreateRepositoryRequest
	35,  // 116: lekko.bff.v1beta1.BFFService.DeleteRepository:input_type -> lekko.bff.v1beta1.DeleteRepositoryRequest
	37,  // 117: lekko.bff.v1beta1.BFFService.ListRepositories:input_type -> lekko.bff.v1beta1.ListRepositoriesRequest
	40,  // 118: lekko.bff.v1beta1.BFFService.ListNamespaces:input_type -> lekko.bff.v1beta1.ListNamespacesRequest
	43,  // 119: lekko.bff.v1beta1.BFFService.ListFeatures:input_type -> lekko.bff.v1beta1.ListFeaturesRequest
	45,  // 120: lekko.bff.v1beta1.BFFService.ListRepositoryContents:input_type -> lekko.bff.v1beta1.ListRepositoryContentsRequest
	50,  // 121: lekko.bff.v1beta1.BFFService.GetFeature:input_type -> lekko.bff.v1beta1.GetFeatureRequest
	48,  // 122: lekko.bff.v1beta1.BFFService.GetRepositoryContents:input_type -> lekko.bff.v1beta1.GetRepositoryContentsRequest
	53,  // 123: lekko.bff.v1beta1.BFFService.AddNamespace:input_type -> lekko.bff.v1beta1.AddNamespaceRequest
	55,  // 124: lekko.bff.v1beta1.BFFService.RemoveNamespace:input_type -> lekko.bff.v1beta1.RemoveNamespaceRequest
	57,  // 125: lekko.bff.v1beta1.BFFService.AddFeature:input_type -> lekko.bff.v1beta1.AddFeatureRequest
	59,  // 126: lekko.bff.v1beta1.BFFService.RemoveFeature:input_type -> lekko.bff.v1beta1.RemoveFeatureRequest
	85,  // 127: lekko.bff.v1beta1.BFFService.Save:input_type -> lekko.bff.v1beta1.SaveRequest
	87,  // 128: lekko.bff.v1beta1.BFFService.ConvertRuleToString:input_type -> lekko.bff.v1beta1.ConvertRuleToStringRequest
	71,  // 129: lekko.bff.v1beta1.BFFService.GetPRInfo:input_type -> lekko.bff.v1beta1.GetPRInfoRequest
	73,  // 130: lekko.bff.v1beta1.BFFService.GetPR:input_type -> lekko.bff.v1beta1.GetPRRequest
	75,  // 131: lekko.bff.v1beta1.BFFService.MergePR:input_type -> lekko.bff.v1beta1.MergePRRequest
	79,  // 132: lekko.bff.v1beta1.BFFService.CreateBranch:input_type -> lekko.bff.v1beta1.CreateBranchRequest
	81,  // 133: lekko.bff.v1beta1.BFFService.ListBranches:input_type -> lekko.bff.v1beta1.ListBranchesRequest
	83,  // 134: lekko.bff.v1beta1.BFFService.DeleteBranch:input_type -> lekko.bff.v1beta1.DeleteBranchRequest
	89,  // 135: lekko.bff.v1beta1.BFFService.Review:input_type -> lekko.bff.v1beta1.ReviewRequest
	91,  // 136: lekko.bff.v1beta1.BFFService.Merge:input_type -> lekko.bff.v1beta1.MergeRequest
	93,  // 137: lekko.bff.v1beta1.BFFService.Eval:input_type -> lekko.bff.v1beta1.EvalRequest
	95,  // 138: lekko.bff.v1beta1.BFFService.GetFlagEvaluationMetrics:input_type -> lekko.bff.v1beta1.GetFlagEvaluationMetricsRequest
	97,  // 139: lekko.bff.v1beta1.BFFService.Restore:input_type -> lekko.bff.v1beta1.RestoreRequest
	99,  // 140: lekko.bff.v1beta1.BFFService.GetRepositoryLogs:input_type -> lekko.bff.v1beta1.GetRepositoryLogsRequest
	102, // 141: lekko.bff.v1beta1.BFFService.GetRollout:input_type -> lekko.bff.v1beta1.GetRolloutRequest
	5,   // 142: lekko.bff.v1beta1.BFFService.GetUserLoggedInInfo:output_type -> lekko.bff.v1beta1.GetUserLoggedInInfoResponse
	7,   // 143: lekko.bff.v1beta1.BFFService.ChangePassword:output_type -> lekko.bff.v1beta1.ChangePasswordResponse
	62,  // 144: lekko.bff.v1beta1.BFFService.OAuthUser:output_type -> lekko.bff.v1beta1.OAuthUserResponse
	64,  // 145: lekko.bff.v1beta1.BFFService.GetUserOAuth:output_type -> lekko.bff.v1beta1.GetUserOAuthResponse
	66,  // 146: lekko.bff.v1beta1.BFFService.DeleteUserOAuth:output_type -> lekko.bff.v1beta1.DeleteUserOAuthResponse
	68,  // 147: lekko.bff.v1beta1.BFFService.AuthorizeDevice:output_type -> lekko.bff.v1beta1.AuthorizeDeviceResponse
	9,   // 148: lekko.bff.v1beta1.BFFService.GenerateAPIKey:output_type -> lekko.bff.v1beta1.GenerateAPIKeyResponse
	12,  // 149: lekko.bff.v1beta1.BFFService.ListAPIKeys:output_type -> lekko.bff.v1beta1.ListAPIKeysResponse
	14,  // 150: lekko.bff.v1beta1.BFFService.DeleteAPIKey:output_type -> lekko.bff.v1beta1.DeleteAPIKeyResponse
	16,  // 151: lekko.bff.v1beta1.BFFService.CheckAPIKey:output_type -> lekko.bff.v1beta1.CheckAPIKeyResponse
	18,  // 152: lekko.bff.v1beta1.BFFService.CreateTeam:output_type -> lekko.bff.v1beta1.CreateTeamResponse
	20,  // 153: lekko.bff.v1beta1.BFFService.DeleteTeam:output_type -> lekko.bff.v1beta1.DeleteTeamResponse
	22,  // 154: lekko.bff.v1beta1.BFFService.UseTeam:output_type -> lekko.bff.v1beta1.UseTeamResponse
	25,  // 155: lekko.bff.v1beta1.BFFService.ListTeamMemberships:output_type -> lekko.bff.v1beta1.ListTeamMembershipsResponse
	27,  // 156: lekko.bff.v1beta1.BFFService.ListUserMemberships:output_type -> lekko.bff.v1beta1.ListUserMembershipsResponse
	29,  // 157: lekko.bff.v1beta1.BFFService.UpsertMembership:output_type -> lekko.bff.v1beta1.UpsertMembershipResponse
	31,  // 158: lekko.bff.v1beta1.BFFService.RemoveMembership:output_type -> lekko.bff.v1beta1.RemoveMembershipResponse
	34,  // 159: lekko.bff.v1beta1.BFFService.CreateRepository:output_type -> lekko.bff.v1beta1.CreateRepositoryResponse
	36,  // 160: lekko.bff.v1beta1.BFFService.DeleteRepository:output_type -> lekko.bff.v1beta1.DeleteRepositoryResponse
	39,  // 161: lekko.bff.v1beta1.BFFService.ListRepositories:output_type -> lekko.bff.v1beta1.ListRepositoriesResponse
	41,  // 162: lekko.bff.v1beta1.BFFService.ListNamespaces:output_type -> lekko.bff.v1beta1.ListNamespacesResponse
	44,  // 163: lekko.bff.v1beta1.BFFService.ListFeatures:output_type -> lekko.bff.v1beta1.ListFeaturesResponse
	46,  // 164: lekko.bff.v1beta1.BFFService.ListRepositoryContents:output_type -> lekko.bff.v1beta1.ListRepositoryContentsResponse
	51,  // 165: lekko.bff.v1beta1.BFFService.GetFeature:output_type -> lekko.bff.v1beta1.GetFeatureResponse
	49,  // 166: lekko.bff.v1beta1.BFFService.GetRepositoryContents:output_type -> lekko.bff.v1beta1.GetRepositoryContentsResponse
	54,  // 167: lekko.bff.v1beta1.BFFService.AddNamespace:output_type -> lekko.bff.v1beta1.AddNamespaceResponse
	56,  // 168: lekko.bff.v1beta1.BFFService.RemoveNamespace:output_type -> lekko.bff.v1beta1.RemoveNamespaceResponse
	58,  // 169: lekko.bff.v1beta1.BFFService.AddFeature:output_type -> lekko.bff.v1beta1.AddFeatureResponse
	60,  // 170: lekko.bff.v1beta1.BFFService.RemoveFeature:output_type -> lekko.bff.v1beta1.RemoveFeatureResponse
	86,  // 171: lekko.bff.v1beta1.BFFService.Save:output_type -> lekko.bff.v1beta1.SaveResponse
	88,  // 172: lekko.bff.v1beta1.BFFService.ConvertRuleToString:output_type -> lekko.bff.v1beta1.ConvertRuleToStringResponse
	72,  // 173: lekko.bff.v1beta1.BFFService.GetPRInfo:output_type -> lekko.bff.v1beta1.GetPRInfoResponse
	74,  // 174: lekko.bff.v1beta1.BFFService.GetPR:output_type -> lekko.bff.v1beta1.GetPRResponse
	76,  // 175: lekko.bff.v1beta1.BFFService.MergePR:output_type -> lekko.bff.v1beta1.MergePRResponse
	80,  // 176: lekko.bff.v1beta1.BFFService.CreateBranch:output_type -> lekko.bff.v1beta1.CreateBranchResponse
	82,  // 177: lekko.bff.v1beta1.BFFService.ListBranches:output_type -> lekko.bff.v1beta1.ListBranchesResponse
	84,  // 178: lekko.bff.v1beta1.BFFService.DeleteBranch:output_type -> lekko.bff.v1beta1.DeleteBranchResponse
	90,  // 179: lekko.bff.v1beta1.BFFService.Review:output_type -> lekko.bff.v1beta1.ReviewResponse
	92,  // 180: lekko.bff.v1beta1.BFFService.Merge:output_type -> lekko.bff.v1beta1.MergeResponse
	94,  // 181: lekko.bff.v1beta1.BFFService.Eval:output_type -> lekko.bff.v1beta1.EvalResponse
	96,  // 182: lekko.bff.v1beta1.BFFService.GetFlagEvaluationMetrics:output_type -> lekko.bff.v1beta1.GetFlagEvaluationMetricsResponse
	98,  // 183: lekko.bff.v1beta1.BFFService.Restore:output_type -> lekko.bff.v1beta1.RestoreResponse
	101, // 184: lekko.bff.v1beta1.BFFService.GetRepositoryLogs:output_type -> lekko.bff.v1beta1.GetRepositoryLogsResponse
	104, // 185: lekko.bff.v1beta1.BFFService.GetRollout:output_type -> lekko.bff.v1beta1.GetRolloutResponse
	142, // [142:186] is the sub-list for method output_type
	98,  // [98:142] is the sub-list for method input_type
	98,  // [98:98] is the sub-list for extension type_name
	98,  // [98:98] is the sub-list for extension extendee
	0,   // [0:98] is the sub-list for field type_name
}

func init() { file_lekko_bff_v1beta1_bff_proto_init() }
func file_lekko_bff_v1beta1_bff_proto_init() {
	if File_lekko_bff_v1beta1_bff_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lekko_bff_v1beta1_bff_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserLoggedInInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserLoggedInInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPIKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAPIKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAPIKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAPIKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseTeamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseTeamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Membership); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamMembershipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTeamMembershipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMembershipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMembershipsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertMembershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMembershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRepositoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNamespacesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryContentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryContentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFeatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OAuthUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserOAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserOAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserOAuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPRInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPRInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergePRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergePRResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertRuleToStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertRuleToStringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagEvaluationMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagEvaluationMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRepositoryLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRolloutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rollout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRolloutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturesResponse_FeatureListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryContentsResponse_FeatureListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRepositoryContentsResponse_NamespaceListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceContents_FeatureListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceContents_NamespaceListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullRequest_Review); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagEvaluationMetricsResponse_ContextKeyCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lekko_bff_v1beta1_bff_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFlagEvaluationMetricsResponse_PathCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lekko_bff_v1beta1_bff_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   110,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lekko_bff_v1beta1_bff_proto_goTypes,
		DependencyIndexes: file_lekko_bff_v1beta1_bff_proto_depIdxs,
		EnumInfos:         file_lekko_bff_v1beta1_bff_proto_enumTypes,
		MessageInfos:      file_lekko_bff_v1beta1_bff_proto_msgTypes,
	}.Build()
	File_lekko_bff_v1beta1_bff_proto = out.File
	file_lekko_bff_v1beta1_bff_proto_rawDesc = nil
	file_lekko_bff_v1beta1_bff_proto_goTypes = nil
	file_lekko_bff_v1beta1_bff_proto_depIdxs = nil
}
