// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.bff.v1beta1;

import "google/protobuf/timestamp.proto";

// Services FE Auth.
service AuthService {
  // We will return required auth info in a cookie
  // that is sent to the same origin for other requests
  // inside the bff service.
  rpc Login(LoginRequest) returns (LoginResponse) {}
  // Logout will expire the user's cookie.
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  // Returns a response indicating if the account already existed.
  rpc RegisterUser(RegisterUserRequest) returns (RegisterUserResponse) {}
  // ConfirmUser will confirm a new user
  rpc ConfirmUser(ConfirmUserRequest) returns (ConfirmUserResponse) {}

  /* The following rpcs implement part of the OAuth 2.0 Device Authorization Grant
     * https://www.ietf.org/rfc/rfc8628.html
  */
  // An rpc that a 3rd party device makes to our backend to obtain device and user
  // codes to complete device oauth.
  rpc GetDeviceCode(GetDeviceCodeRequest) returns (GetDeviceCodeResponse) {}
  // An rpc that a 3rd party device polls to obtain an access token once
  // the user has completed authentication through a browser-based user agent.
  rpc GetAccessToken(GetAccessTokenRequest) returns (GetAccessTokenResponse) {}
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {}

message LogoutRequest {}

message LogoutResponse {}

message RegisterUserRequest {
  string username = 1;
  string password = 2;
  string confirm_password = 3;
}

message RegisterUserResponse {
  bool account_existed = 1;
}

message ConfirmUserRequest {
  string username = 1;
  string code = 2;
}

message ConfirmUserResponse {}

message GetDeviceCodeRequest {
  // The identifier given to the client (in our case, a hardcoded id shipped with lekko cli)
  string client_id = 1;
  // Note: in the future, we may introduce an additional param 'repeated string scopes'.
}

message GetDeviceCodeResponse {
  // Server-generated code that identifies the device making the request
  string device_code = 1;
  // Server-generated user code that must be entered at the verification uri
  string user_code = 2;
  // URI to display to the user where the user will be able to complete auth.
  string verification_uri = 3;
  // ${verification_uri}?user_code=${user_code}
  string verification_uri_complete = 4;
  // Time at which the device and user codes expire.
  google.protobuf.Timestamp expires_at = 5;
  // Number of seconds to wait between subsequent polls to
  // GetAccessToken.
  int64 interval_s = 6;
}

message GetAccessTokenRequest {
  // device code originally obtained from GetDeviceCode rpc
  string device_code = 1;
  string client_id = 2;
}

message GetAccessTokenResponse {
  // Long-lived access token that the client can provide
  // to the server in future requests to remain authenticated.
  string access_token = 1;
  // Optional team name that the authenticated user is authorized
  // to operate on.
  string team_name = 2;
  // Optional future values:
  // google.protobuf.Timestamp expires_at
  // string refresh_token
  // repeated string scopes
}
