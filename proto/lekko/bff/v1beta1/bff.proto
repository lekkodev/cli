// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.bff.v1beta1;

import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/error_details.proto";
import "lekko/client/v1beta1/configuration_service.proto";
import "lekko/feature/v1beta1/feature.proto";
import "lekko/feature/v1beta1/static.proto";
import "lekko/rules/v1beta3/rules.proto";

// BFFService exposes functionality needed for the lekko UI.
// All actions will be performed on behalf of a user, who has
// a valid JWT token. Therefore, organization or user information
// does not need to be passed into the RPCs.
service BFFService {
  // User management
  rpc GetUserGitHubRepos(GetUserGitHubReposRequest) returns (GetUserGitHubReposResponse) {}
  rpc GetUserGitHubInstallations(GetUserGitHubInstallationsRequest) returns (GetUserGitHubInstallationsResponse) {}
  rpc GetUserLoggedInInfo(GetUserLoggedInInfoRequest) returns (GetUserLoggedInInfoResponse) {}
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {}
  // Retrieves an oauth access token for the user, and stores in in the database
  rpc OAuthUser(OAuthUserRequest) returns (OAuthUserResponse) {}
  rpc GetUserOAuth(GetUserOAuthRequest) returns (GetUserOAuthResponse) {}
  rpc DeleteUserOAuth(DeleteUserOAuthRequest) returns (DeleteUserOAuthResponse) {}
  rpc AuthorizeDevice(AuthorizeDeviceRequest) returns (AuthorizeDeviceResponse) {}
  // Generate an API used by SDKs to authenticate with Lekko.
  rpc GenerateAPIKey(GenerateAPIKeyRequest) returns (GenerateAPIKeyResponse) {}
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {}
  rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (DeleteAPIKeyResponse) {}
  // Verifies that the given api key is valid. Note: this is a convenience
  // method. For safety reasons you're only able to check an api key for
  // your currently active team.
  rpc CheckAPIKey(CheckAPIKeyRequest) returns (CheckAPIKeyResponse) {}

  // Team management

  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse) {}
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse) {}
  rpc UseTeam(UseTeamRequest) returns (UseTeamResponse) {}
  rpc ListTeamMemberships(ListTeamMembershipsRequest) returns (ListTeamMembershipsResponse) {}
  rpc ListUserMemberships(ListUserMembershipsRequest) returns (ListUserMembershipsResponse) {}
  rpc UpsertMembership(UpsertMembershipRequest) returns (UpsertMembershipResponse) {}
  rpc RemoveMembership(RemoveMembershipRequest) returns (RemoveMembershipResponse) {}
  rpc ResendInvitationEmail(ResendInvitationEmailRequest) returns (ResendInvitationEmailResponse) {}

  // Repository management

  rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse) {}
  rpc DeleteRepository(DeleteRepositoryRequest) returns (DeleteRepositoryResponse) {}
  rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse) {}

  rpc GetFeature(GetFeatureRequest) returns (GetFeatureResponse) {}
  rpc GetFeatureHistory(GetFeatureHistoryRequest) returns (GetFeatureHistoryResponse) {}
  rpc GetRepositoryContents(GetRepositoryContentsRequest) returns (GetRepositoryContentsResponse) {}
  rpc AddNamespace(AddNamespaceRequest) returns (AddNamespaceResponse) {}
  rpc RemoveNamespace(RemoveNamespaceRequest) returns (RemoveNamespaceResponse) {}
  rpc AddFeature(AddFeatureRequest) returns (AddFeatureResponse) {}
  rpc RemoveFeature(RemoveFeatureRequest) returns (RemoveFeatureResponse) {}
  // Saves a feature to the local repo, and runs compilation.
  // This method relies on static parsing to save content, which is currently
  // not supported for protobuf features.
  rpc Save(SaveRequest) returns (SaveResponse) {}
  // Saves the raw starlark of a feature to the local repo, and runs compilation.
  rpc SaveStarlark(SaveStarlarkRequest) returns (SaveStarlarkResponse) {}

  // Helper for Rules AST -> String.
  rpc ConvertRuleToString(ConvertRuleToStringRequest) returns (ConvertRuleToStringResponse) {}

  // Get info about a single PR for the provided branch
  rpc GetPR(GetPRRequest) returns (GetPRResponse) {}
  rpc ListPRs(ListPRsRequest) returns (ListPRsResponse) {}

  // Branch management

  rpc CreateBranch(CreateBranchRequest) returns (CreateBranchResponse) {}
  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse) {}
  rpc DeleteBranch(DeleteBranchRequest) returns (DeleteBranchResponse) {}

  // Review opens a pull request against main using the currently committed changes.
  rpc Review(ReviewRequest) returns (ReviewResponse) {}
  // Merges the pull request based on the given session.
  rpc Merge(MergeRequest) returns (MergeResponse) {}
  // Evaluates the feature based on the given session.
  rpc Eval(EvalRequest) returns (EvalResponse) {}
  rpc GetFlagEvaluationMetrics(GetFlagEvaluationMetricsRequest) returns (GetFlagEvaluationMetricsResponse) {}
  rpc GetRepoMetrics(GetRepoMetricsRequest) returns (GetRepoMetricsResponse) {}
  // Performs a global restore of the repo, creating a dev session under the hood with the changes.
  rpc Restore(RestoreRequest) returns (RestoreResponse) {}
  rpc GetRepositoryLogs(GetRepositoryLogsRequest) returns (GetRepositoryLogsResponse) {}
  rpc GetRollout(GetRolloutRequest) returns (GetRolloutResponse) {}
}

message GetUserGitHubReposRequest {
  repeated int64 github_installation_ids = 1;
}

message GetUserGitHubReposResponse {
  repeated Repository repositories = 1;
}

message Installation {
  int64 id = 1;
  string name = 2;
  string owner_type = 3;
}

message GetUserGitHubInstallationsRequest {}

message GetUserGitHubInstallationsResponse {
  repeated Installation installations = 1;
}

message GetUserLoggedInInfoRequest {}

message GetUserLoggedInInfoResponse {
  string username = 1;
  string team_name = 2;
}

message ChangePasswordRequest {
  string old_password = 1;
  string new_password = 2;
  string confirm_new_password = 3;
}

message ChangePasswordResponse {}

message GenerateAPIKeyRequest {
  // String to be associated with this api key.
  string nickname = 1;
  string team_name = 2;
}

message GenerateAPIKeyResponse {
  string api_key = 1;
}

message APIKey {
  string team_name = 1;
  string nickname = 2;
  // Lekko username of the user who created the api key
  string created_by = 3;
  google.protobuf.Timestamp created_at = 4;
  // The string representation of the api key, with the
  // suffix masked.
  string api_key_masked = 5;
}

message ListAPIKeysRequest {
  string team_name = 1;
}

message ListAPIKeysResponse {
  repeated APIKey api_keys = 1;
}

message DeleteAPIKeyRequest {
  string nickname = 1;
  string team_name = 2;
}

message DeleteAPIKeyResponse {}

message CheckAPIKeyRequest {
  string api_key = 1;
  string team_name = 2;
}

message CheckAPIKeyResponse {
  APIKey key = 1;
}

message CreateTeamRequest {
  string name = 1;
}

message CreateTeamResponse {
  string team = 1;
  RepositoriesResponse repositories = 2;
}

message DeleteTeamRequest {
  string team_name = 1;
}

message DeleteTeamResponse {
  // Response contains team information about
  // the user's newly picked default team.
  // If the user has no other teams, the team will be empty.
  string team = 1;
  RepositoriesResponse repositories = 2;
}

message UseTeamRequest {
  string name = 1;
}

message UseTeamResponse {
  string team = 1;
  RepositoriesResponse repositories = 2;
}

enum MembershipRole {
  MEMBERSHIP_ROLE_UNSPECIFIED = 0;
  MEMBERSHIP_ROLE_MEMBER = 1;
  MEMBERSHIP_ROLE_OWNER = 2;
}

enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_UNCONFIRMED = 1;
  USER_STATUS_CONFIRMED = 2;
}

message Membership {
  string team_name = 1;
  string username = 2;
  MembershipRole role = 3;
  UserStatus user_status = 4;
}

message ListTeamMembershipsRequest {
  string team_name = 1;
}

message ListTeamMembershipsResponse {
  repeated Membership memberships = 1;
}

message ListUserMembershipsRequest {}

message ListUserMembershipsResponse {
  repeated Membership memberships = 1;
}

message UpsertMembershipRequest {
  // User that you wish to add to the current team
  string username = 1;
  // Role that you wish to assign
  MembershipRole role = 2;
  string team_name = 3;
}

message UpsertMembershipResponse {
  Membership membership = 1;
}

message ResendInvitationEmailRequest {
  string username = 1;
  string team_name = 2;
}

message ResendInvitationEmailResponse {}

message RemoveMembershipRequest {
  // User that you wish to remove from the current team
  string username = 1;
  string team_name = 2;
}

message RemoveMembershipResponse {}

message RepositoryKey {
  string owner_name = 1; // github owner
  string repo_name = 2;
  // random uuid to help identify a request, for
  // debugging purposes.
  string uuid = 3;
  string team_name = 4;
}

message CreateRepositoryRequest {
  RepositoryKey repo_key = 1;
  string description = 2;
}

message CreateRepositoryResponse {
  string url = 1;
  Repository repository = 2;
}

message DeleteRepositoryRequest {
  RepositoryKey repo_key = 1;
  // If provided, this rpc will also delete the repository upstream, e.g. on github.
  // This flag should probably depend on user preference.
  bool delete_on_remote = 2;
}

message DeleteRepositoryResponse {}

message ListRepositoriesRequest {}

enum GithubInstallationStatus {
  GITHUB_INSTALLATION_STATUS_UNSPECIFIED = 0;
  GITHUB_INSTALLATION_STATUS_ADDED = 1;
  GITHUB_INSTALLATION_STATUS_REMOVED = 2;
  GITHUB_INSTALLATION_STATUS_SUSPENDED = 3;
  GITHUB_INSTALLATION_STATUS_ERROR = 4;
}

message Repository {
  string owner_name = 1;
  string repo_name = 2;
  int64 github_installation_id = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  string description = 6;
  string url = 7;
  // Whether or not the requesting user is authorized
  // to access this repository on github
  bool user_authorized = 8;
  // The git sha of the repo that is currently deployed
  // in Lekko. If empty, it means that the repo has not
  // been rolled out yet.
  string sha = 9;
  // The branch name currently deployed in Lekko. This
  // is typically the default branch, e.g. 'main'.
  string branch_name = 10;
  GithubInstallationStatus github_installation_status = 11;
}

// RepositoriesResponse contains either a
// list of repositories for the requested team,
// or error details describing why the server
// was unable to retrieve the list of repositories.
message RepositoriesResponse {
  message Repositories {
    repeated Repository repositories = 1;
  }

  oneof repository_response {
    google.rpc.ErrorInfo error = 1;
    Repositories repositories = 2;
  }
}

message ListRepositoriesResponse {
  repeated Repository repositories = 1;
}

message NamespaceContents {
  message FeatureListItem {
    string name = 1;
  }

  message NamespaceListItem {
    string name = 1;
    // version of the namespace in lekko, e.g. 'v1beta3'
    string version = 2;
    repeated FeatureListItem features = 3;
  }

  repeated NamespaceListItem namespaces = 1;
}

message GetRepositoryContentsRequest {
  BranchKey key = 1;
  // The feature contents that should be returned.
  // If empty, no feature is returned. If either
  // one of the following two fields are provided,
  // the other one must be provided as well.
  string namespace_name = 2;
  string feature_name = 3;
}

message GetRepositoryContentsResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
  Feature feature = 3;
  // The user-defined type registry for the repository
  google.protobuf.FileDescriptorSet file_descriptor_set = 4;
}

message GetFeatureRequest {
  // includes the branch name to fetch from. If 'main',
  // we will fetch from mysql. If not, we will fetch
  // from the appropriate development session.
  BranchKey key = 1;
  string namespace_name = 2;
  string feature_name = 3;
}

message GetFeatureResponse {
  Feature feature = 1;
  // The parent branch of this feature
  Branch branch = 2;
}

message GetFeatureHistoryRequest {
  BranchKey branch_key = 1;
  string namespace_name = 2;
  string feature_name = 3;
  int32 page = 4;
  int32 per_page = 5;
}

message GetFeatureHistoryResponse {
  repeated FeatureHistoryItem history = 1;
}

message Feature {
  string name = 1;
  string namespace_name = 2;
  bytes json = 3;
  bytes star = 4;
  // This field will only be populated if we are able to
  // statically parse the requested feature.
  lekko.feature.v1beta1.Feature static_feature = 5;
  // the blob sha of the proto bin file according to git
  string sha = 6;
  lekko.feature.v1beta1.StaticFeature static_feature_new = 7;
}

message FeatureHistoryItem {
  string commit_sha = 1;
  string commit_message = 2;
  google.protobuf.Timestamp commit_timestamp = 3;
  // Email of the commit author. GitHub uses emails to identify user accounts.
  // Might not be available.
  string author_email = 4;
  // Commit author name. If we can't get the GitHub user's full name for the
  // commit, this will simply be the GitHub login/username.
  string author_name = 5;
  // URL for the commit author's GitHub profile. Might not be available.
  string author_url = 6;
}

message AddNamespaceRequest {
  BranchKey key = 1;
  string namespace_name = 2;
}

message AddNamespaceResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
}

message RemoveNamespaceRequest {
  BranchKey key = 1;
  string namespace_name = 2;
}

message RemoveNamespaceResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
}

enum FeatureType {
  FEATURE_TYPE_UNSPECIFIED = 0;
  FEATURE_TYPE_BOOL = 1;
  FEATURE_TYPE_INT = 2;
  FEATURE_TYPE_FLOAT = 3;
  FEATURE_TYPE_STRING = 4;
  FEATURE_TYPE_JSON = 5;
  FEATURE_TYPE_PROTO = 6;
}

message AddFeatureRequest {
  BranchKey key = 1;
  string namespace_name = 2;
  string feature_name = 3;
  FeatureType type = 4 [deprecated = true];
  lekko.feature.v1beta1.FeatureType type_new = 5;
  // if the feature type is proto, you may specify the message
  // name, e.g. google.protobuf.BoolValue. If empty, we will
  // pick google.protobuf.BoolValue.
  string proto_message_name = 6;
}

message AddFeatureResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
  Feature feature = 3;
}

message RemoveFeatureRequest {
  BranchKey key = 1;
  string namespace_name = 2;
  string feature_name = 3;
}

message RemoveFeatureResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
}

message OAuthUserRequest {
  // oauth code obtained from the provider (assuming github for now)
  string code = 1;
  // The random string given to the auth provider.
  string state = 2;
}

message OAuthUserResponse {}

message GetUserOAuthRequest {}

message GetUserOAuthResponse {
  bool authenticated = 1;
  // The oauth token with the suffix masked.
  string oauth_token_masked = 2;
}

message DeleteUserOAuthRequest {}

message DeleteUserOAuthResponse {}

message AuthorizeDeviceRequest {
  string user_code = 1;
}

message AuthorizeDeviceResponse {}

enum ChecksState {
  CHECKS_STATE_UNSPECIFIED = 0;
  CHECKS_STATE_IN_PROGRESS = 1;
  CHECKS_STATE_PASSED = 2;
  CHECKS_STATE_FAILED = 3;
}

// The result of a single github CI check run.
// There are potentially many check runs associated with
// a single git sha.
message CheckRun {
  string name = 1;
  string status = 2;
  string conclusion = 3;
  string url = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
}

enum PullRequestState {
  PULL_REQUEST_STATE_UNSPECIFIED = 0;
  PULL_REQUEST_STATE_OPEN = 1;
  PULL_REQUEST_STATE_CLOSED = 2;
  PULL_REQUEST_STATE_ALL = 3;
}

message PullRequest {
  message Review {
    // user who performed the review
    string user = 1;
    google.protobuf.Timestamp submitted_at = 2;
    string state = 3;
    // review author's association with the repo.
    // https://docs.github.com/en/graphql/reference/enums#commentauthorassociation
    string author_association = 4;
  }

  // Specifies whether or not this pull request can be merged.
  enum Mergeable {
    MERGEABLE_UNSPECIFIED = 0;
    // GitHub has not yet determined if the PR is mergeable or not.
    // Try again after some delay.
    MERGEABLE_PENDING = 1;
    // The PR has no merge conflicts with its base, and can be merged.
    MERGEABLE_TRUE = 2;
    // The PR has merge conflicts with its base. It can't be merged
    // in its current state.
    MERGEABLE_FALSE = 3;
  }

  reserved 4, 5, 6, 7;
  string title = 1;
  string url = 2;
  int64 number = 3;
  repeated Review reviews = 8;
  repeated CheckRun check_runs = 9;
  // the git ref (e.g. my-feature) and git sha of the
  // head and base of this PR.
  string head_ref = 10;
  string head_sha = 11;
  string base_ref = 12;
  string base_sha = 13;
  Mergeable mergeable = 14;
  PullRequestState pr_state = 15;
  // github user that created the PR
  string github_user = 16;
  google.protobuf.Timestamp created_at = 17;
}

message GetPRRequest {
  BranchKey branch_key = 1;
}

message GetPRResponse {
  PullRequest pull_request = 1;
}

message ListPRsRequest {
  RepositoryKey repo_key = 1;
  PullRequestState state = 2;
  int32 page = 3;
  int32 per_page = 4;
}

message ListPRsResponse {
  repeated PullRequest prs = 1;
}

// Branches are user-scoped git-branches
message Branch {
  BranchKey key = 1;
  string description = 2;
  string sha = 3;
  // Note: pr_number is 0 if there is no PR.
  // Deprecated in favor of the pull_request object below.
  int64 pr_number = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  // The base sha is the sha that the branch
  // was pointing to when it was created.
  string base_sha = 7;
  // Optional pull request. If no pull request
  // has been created for this branch, returns empty
  PullRequest pull_request = 8;
  // Indicates whether or not this branch is the default
  // branch for the repository.
  bool default = 9;
}

message BranchKey {
  string owner_name = 1;
  string repo_name = 2;
  string name = 3;
  // random uuid to help identify a request, for
  // debugging purposes.
  string uuid = 4;
  string team_name = 5;
}

message CreateBranchRequest {
  // Includes sufficiently unique branch name
  // generated by the caller.
  BranchKey key = 1;
  // user-friendly description of the branch
  string description = 2;
  // commit sha to branch off from. This is what HEAD of
  // the new branch will point to.
  string sha = 3;
}

message CreateBranchResponse {
  Branch branch = 1;
}

message ListBranchesRequest {
  RepositoryKey repo_key = 1;
}

message ListBranchesResponse {
  // Will always include the default branch and its sha info in the response.
  repeated Branch branches = 1;
}

message DeleteBranchRequest {
  BranchKey key = 1;
}

message DeleteBranchResponse {}

message SaveRequest {
  reserved 1;
  string namespace_name = 2;
  string feature_name = 3;

  bytes star = 4;
  lekko.feature.v1beta1.Feature feature = 5;
  BranchKey key = 6;
  // If true, you are allowed to change the type of a feature
  // as part of this save
  bool ignore_backwards_compatibility = 7;
  lekko.feature.v1beta1.StaticFeature feature_new = 8;
}

message SaveResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
  Feature feature = 3;
}

message SaveStarlarkRequest {
  BranchKey key = 1;
  string namespace_name = 2;
  string feature_name = 3;
  // The starlark we wish to save.
  bytes star = 4;
  // If true, you are allowed to change the type of a feature
  // as part of this save
  bool ignore_backwards_compatibility = 5;
  lekko.feature.v1beta1.StaticFeature feature_new = 6;
}

message SaveStarlarkResponse {
  Branch branch = 1;
  NamespaceContents namespace_contents = 2;
  Feature feature = 3;
  bytes output = 4;
  // This rpc will return output bytes even if compilation
  // failed. In that case, success will be false.
  bool success = 5;
}

message ConvertRuleToStringRequest {
  lekko.rules.v1beta3.Rule rule = 1;
}

message ConvertRuleToStringResponse {
  string rule_string = 1;
}

message ReviewRequest {
  reserved 1;
  BranchKey key = 2;
}

message ReviewResponse {
  // url of the pull request that has just been created.
  // Deprecated - branch now includes the PR url
  string url = 1;
  Branch branch = 2;
}

message MergeRequest {
  reserved 1;
  BranchKey key = 2;
}

message MergeResponse {
  // we don't return branch information here because the branch
  // is deleted upon successful merge.
}

message EvalRequest {
  reserved 1;
  string namespace_name = 2;
  string feature_name = 3;

  map<string, lekko.client.v1beta1.Value> context = 4;
  BranchKey key = 5;
}

message EvalResponse {
  google.protobuf.Any result = 1;
  lekko.feature.v1beta1.FeatureType type = 2;
  lekko.feature.v1beta1.Any result_new = 3;
}

message MultiEvalRequest {
  message Config {
    string namespace_name = 1;
    string feature_name = 2;
  }

  repeated Config configs = 1;
  map<string, lekko.client.v1beta1.Value> context = 2;
  BranchKey key = 3;
}

message MultiEvalResponse {
  message EvaluatedConfigs {
    google.protobuf.Any result = 1;
    lekko.feature.v1beta1.FeatureType type = 2;
  }
  repeated EvaluatedConfigs evaluated_configs = 1;
  map<string, lekko.client.v1beta1.Value> context = 2;
  BranchKey key = 3;
}

message Measurement {
  google.protobuf.Timestamp time = 1;
  int64 value = 2;
}

message MetricsTimeSeries {
  string name = 1;
  repeated Measurement measurements = 2;
}

message GetFlagEvaluationMetricsRequest {
  RepositoryKey repo_key = 1;
  string commit_sha = 2; // deprecated
  string namespace_name = 3;
  string feature_name = 4;
  // Defaults to T-7 days
  google.protobuf.Timestamp start_time = 5;
  // Defaults to now
  google.protobuf.Timestamp end_time = 6;
}

message GetFlagEvaluationMetricsResponse {
  string commit_sha = 1; // deprecated
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  // total number of times the given feature was evaluated
  int64 total_evaluations = 4;

  message ContextKeyCount {
    string key = 1;
    string type = 2;
    int64 count = 3;
  }

  // All the context keys that were provided, and how frequent they were
  repeated ContextKeyCount context_key_counts = 5;

  message PathCount {
    repeated int64 path = 1;
    int64 count = 2;
  }

  // Which paths successfully evaluated, and how frequently
  repeated PathCount path_counts = 6;
  string feature_sha = 7; // deprecated

  message TimeSeries {
    repeated int64 path = 1;
    repeated Measurement measurements = 2;
  }
  repeated GetFlagEvaluationMetricsResponse.TimeSeries evaluation_counts = 8;

  repeated MetricsTimeSeries time_series_by_api_key = 9;
  repeated MetricsTimeSeries time_series_by_config_sha = 10;
}

message GetRepoMetricsRequest {
  RepositoryKey repo_key = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
}

message GetRepoMetricsResponse {
  repeated MetricsTimeSeries time_series = 1;
}

// Restore will start a new session, with all
// data in the repo restored to the hash requested.
message RestoreRequest {
  reserved 1;
  string branch_description = 2;
  // Commit hash to restore the repo to.
  string commit_hash = 3;
  // Includes sufficiently unique branch name
  // generated by the caller.
  BranchKey key = 4;
}

message RestoreResponse {
  reserved 1;
  Branch branch = 2;
}

message GetRepositoryLogsRequest {
  RepositoryKey repo_key = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message RepositoryLog {
  string sha = 1;
  // If we are able to identify the lekko user that authored the commit,
  // this will refer to their username. If not, we fall back to github
  // username.
  string username = 2;
  google.protobuf.Timestamp create_time = 3;
  string commit_message = 4;
}

message GetRepositoryLogsResponse {
  repeated RepositoryLog logs = 1;
  string next_page_token = 2;
}

message GetRolloutRequest {
  RepositoryKey repo_key = 1;
}

message Rollout {
  string target_sha = 1;
  string source = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
  // If we are able to identify the lekko user that authored the commit,
  // this will refer to their username. If not, we fall back to github
  // username.
  string username = 5;
  string commit_message = 6;
}

message GetRolloutResponse {
  Rollout rollout = 1;
}
