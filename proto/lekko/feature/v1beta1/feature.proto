// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.feature.v1beta1;

import "google/protobuf/any.proto";
import "lekko/rules/v1beta2/rules.proto";

// A prototype of the wrapper type that will be used to house all feature flags for
// the 'homegrown' feature flagging solution:
//  User-defined proto defintions, and a tree-based constraints system.
// A real-life example of this in practice is visualized here:
// https://lucid.app/lucidchart/f735298f-db2c-4207-8d14-28b375a25871/edit?view_items=bV8G0U69AJNc&invitationId=inv_d057a3b1-21d6-4290-9aea-5eb1c556a8ef#
message Feature {
  string key = 1;
  string description = 2;
  Tree tree = 3;
  FeatureType type = 4;
}

// Enumerates the canonical types that lekko supports
enum FeatureType {
  FEATURE_TYPE_UNSPECIFIED = 0;
  FEATURE_TYPE_BOOL = 1;
  FEATURE_TYPE_INT = 2;
  FEATURE_TYPE_FLOAT = 3;
  FEATURE_TYPE_STRING = 4;
  FEATURE_TYPE_JSON = 5;
  FEATURE_TYPE_PROTO = 6;
}

// When the rules evaluator is traversing the tree, it will keep a local variable
// 'value' that is updated along the way and is finally returned. It is initially
// set to the default value of the root node.
message Tree {
  // The default value to fall back to. If there are no constraints/rules
  // defined, this is what gets returned.
  google.protobuf.Any default = 1;
  repeated Constraint constraints = 2;
}

message Constraint {
  // RulesLang string. All edits to ruleslang will be made to
  // this string for now, and the ast will be derived from it.
  string rule = 1;

  // This can be empty. If non-empty, and the above rule evaluated to true,
  // then the rules engine should set its return value to this value.
  google.protobuf.Any value = 2;

  // If this list is empty, or none of the rules pass,
  // return the most recent concrete value we traversed.
  repeated Constraint constraints = 3;

  // Rules AST used for rules evaluation. It is a strict derivative of the
  // string rule above.
  lekko.rules.v1beta2.Rule rule_ast = 4;
}
