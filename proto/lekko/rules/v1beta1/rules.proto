// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.rules.v1beta1;

import "google/protobuf/struct.proto";

enum Type {
  TYPE_UNSPECIFIED = 0;
  TYPE_BOOL = 1;
  TYPE_NUMBER = 2;
  TYPE_STRING = 3;
}

enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0;
  LOGICAL_OPERATOR_EQUALS = 1;
  // > < >= <= only applies to number values.
  LOGICAL_OPERATOR_LESS_THAN = 2;
  LOGICAL_OPERATOR_LESS_THAN_OR_EQUALS = 3;
  LOGICAL_OPERATOR_GREATER_THAN = 4;
  LOGICAL_OPERATOR_GREATER_THAN_OR_EQUALS = 5;
  // Contained within or not contained within only applies to list values.
  LOGICAL_OPERATOR_CONTAINED_WITHIN = 6;
  LOGICAL_OPERATOR_NOT_CONTAINED_WITHIN = 7;
}

enum ConditionLinker {
  CONDITION_LINKER_UNSPECIFIED = 0;
  CONDITION_LINKER_AND = 1;
  CONDITION_LINKER_OR = 2;
}

message Constraint {
  repeated Condition conditions = 1;
  // For now, we will only allow one condition linker that applies
  // to all sets of conditions where len(conditions) > 1. This will be
  // unset when len(conditions) == 1.
  ConditionLinker condition_linker = 2;
  google.protobuf.Value resulting_value = 3;
}

message Condition {
  string context_key = 1;
  google.protobuf.Value comparison_value = 2;
  // For operators, context is on the left, comparison value on the right.
  LogicalOperator logical_operator = 3;
}

message Feature {
  string name = 1;
  Type type = 2;
  google.protobuf.Value default_value = 3;
  repeated Constraint constraints = 4;
}
