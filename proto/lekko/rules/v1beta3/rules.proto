// Copyright 2022 Lekko Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lekko.rules.v1beta3;

import "google/protobuf/struct.proto";

// A Rule is a top level object that recursively defines an AST represented
// by ruleslang. A rule is always one of 4 things:
// 1. Atom -> This is a leaf node in the tree that returns true or false
// 2. Not -> This negates the result of the underlying Rule.
// 3. LogicalExpression -> This rule links at least two rules through an "and" or an "or".
// 4. BoolConst -> true or false. This will be used for higher level short-circuits.
// 5. CallExpression -> This rule is a function call that returns true or false.
// Parentheses and other logical constructs can all be represented by the correct
// construction of this rule tree.
//
// !(A && B && C) || D can be represented by LogExp ( Not ( LogExp ( Atom(A) && Atom(B) && Atom(C) )) || Atom(D))
message Rule {
  oneof rule {
    Atom atom = 1;
    Rule not = 2;
    LogicalExpression logical_expression = 3;
    bool bool_const = 4;
    CallExpression call_expression = 5;
  }
}

// LogicalExpression operator applies a logical operator like "and" or "or" to n rules.
// They are evaluated in the order expressed by the repeated field.
message LogicalExpression {
  repeated Rule rules = 1;
  LogicalOperator logical_operator = 3;
}

// An atom is a fragment of ruleslang that can result in a true or false.
// An atom always has a comparison operator and a context key, and can optionally
// have a comparison value.
message Atom {
  string context_key = 1;
  // For the "PRESENT" operator, the comparison value should be null.
  google.protobuf.Value comparison_value = 2;
  // For operators, context is on the left, comparison value on the right.
  ComparisonOperator comparison_operator = 3;
}

enum ComparisonOperator {
  COMPARISON_OPERATOR_UNSPECIFIED = 0;
  // == only applies to number, string and bool values.
  COMPARISON_OPERATOR_EQUALS = 1;
  // > < >= <= only applies to number values.
  COMPARISON_OPERATOR_LESS_THAN = 2;
  COMPARISON_OPERATOR_LESS_THAN_OR_EQUALS = 3;
  COMPARISON_OPERATOR_GREATER_THAN = 4;
  COMPARISON_OPERATOR_GREATER_THAN_OR_EQUALS = 5;
  // Contained within only applies to list values. Elements
  // of the list must be primitive (i.e. number, string or bool)
  COMPARISON_OPERATOR_CONTAINED_WITHIN = 6;
  // Starts with and ends with only apply to string values.
  COMPARISON_OPERATOR_STARTS_WITH = 7;
  COMPARISON_OPERATOR_ENDS_WITH = 8;
  // Contains only applies to string values, and for now is strict equality.
  // If we support things like regex or case insensitive matches, they will
  // be separate operators.
  COMPARISON_OPERATOR_CONTAINS = 9;
  // Present is the only operator that doesn't require a comparison value.
  COMPARISON_OPERATOR_PRESENT = 10;
  // != only applies to number, string and bool values.
  COMPARISON_OPERATOR_NOT_EQUALS = 11;
}

enum LogicalOperator {
  LOGICAL_OPERATOR_UNSPECIFIED = 0;
  LOGICAL_OPERATOR_AND = 1;
  LOGICAL_OPERATOR_OR = 2;
}

// CallExpression represents a function call, e.g. f(a, b, c).
// Each function has a specific signature, so a CallExpression is
// expressed as one of the different supported functions.
message CallExpression {
  // Example signature
  // message Example {
  //   uint32 x = 1;
  //   string y = 2;
  // }

  // Bucketing function for percentage-based context evaluation
  message Bucket {
    string context_key = 1;
    // Threshold for dividing buckets.
    // Stored as an integer in the range [0, 100000] instead of a double
    // to avoid potential precision issues while supporting up to 3
    // decimal places to users.
    // e.g. threshold = 75125 -> 75.125%
    uint32 threshold = 2;
  }

  // Function for nested config evaluation
  // Returns `true` if the config with `config_name` evaluates to `config_value`
  message EvaluateTo {
    string config_name = 1;
    string config_value = 2;
  }

  oneof function {
    Bucket bucket = 1;
    EvaluateTo evaluate_to = 2;
  }
}
