#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitEnvVars = exports.transformer = exports.helpers = void 0;
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const path_1 = tslib_1.__importDefault(require("path"));
const commander_1 = require("commander");
const transformer_1 = tslib_1.__importStar(require("./transformer"));
Object.defineProperty(exports, "transformer", { enumerable: true, get: function () { return transformer_1.transformer; } });
const helpers = tslib_1.__importStar(require("./helpers"));
exports.helpers = helpers;
const emit_env_vars_1 = require("./emit-env-vars");
Object.defineProperty(exports, "emitEnvVars", { enumerable: true, get: function () { return emit_env_vars_1.emitEnvVars; } });
if (require.main === module) {
    commander_1.program.requiredOption("-f, --filename <string>", "ts file to convert to Lekko");
    commander_1.program.parse();
    const options = commander_1.program.opts();
    const filename = String(options.filename);
    let tsProgram = typescript_1.default.createProgram([filename], {
        target: typescript_1.default.ScriptTarget.ESNext,
        outDir: "dist",
    });
    // twoWaySync(tsProgram, {
    //   configSrcPath: path.dirname(filename),
    //   target: "next",
    //   emitEnv: false,
    // });
    tsProgram = (0, transformer_1.default)(tsProgram, undefined, {
        configSrcPath: path_1.default.dirname(filename),
        target: "next",
        emitEnv: false,
    }, { ts: typescript_1.default });
    tsProgram.emit();
}
exports.default = transformer_1.default;
//# sourceMappingURL=index.js.map