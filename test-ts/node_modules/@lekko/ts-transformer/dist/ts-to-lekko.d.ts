/// <reference types="ts-expose-internals/typescript" />
import ts, { type TypeChecker } from "typescript";
import { type ProtoFileBuilder, type LekkoConfigJSON } from "./types";
import { type CheckedFunctionDeclaration } from "./helpers";
/**
 * Creates a JSON representation of a Lekko config from a function declaration.
 */
export declare function functionToConfigJSON(node: CheckedFunctionDeclaration, checker: ts.TypeChecker, namespace: string, configKey: string, returnType: ts.Type): LekkoConfigJSON;
/**
 * Generates starlark files in local config repo based on function declarations.
 * Depends on the Lekko CLI.
 */
export declare function genStarlark(repoPath: string, namespace: string, config: LekkoConfigJSON): void;
/**
 * Mutates the proto builder based on the interface declaration node.
 */
export declare function interfaceToProto(node: ts.InterfaceDeclaration, checker: TypeChecker, builder: ProtoFileBuilder): void;
/**
 * Check for presence of lekko and buf CLIs. Also creates a default repo for now.
 * TODO: Add version range checks.
 */
export declare function checkCLIDeps(): void;
/**
 * Generate .proto files in local config repo.
 * TODO: Switch to using proto fds when we want to add more advanced features
 * and be more error-proof instead of manually constructing file contents
 */
export declare function genProtoFile(sourceFile: ts.SourceFile, repoPath: string, builder: ProtoFileBuilder): void;
/**
 * Generate TS proto bindings. Depends on the buf CLI. Returns a map of
 * relative paths to generated ts contents.
 * This is a generator function - it can be reentered to trigger cleanup logic.
 */
export declare function genProtoBindings(repoPath: string, outputPath: string, namespace: string): Generator<Record<string, string>, void, unknown>;
